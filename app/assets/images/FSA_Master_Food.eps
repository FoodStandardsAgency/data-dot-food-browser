%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: FSA_Master_Food.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Keane, Jerome
%%CreationDate: 2/22/10
%%BoundingBox: 0 0 140 70
%%HiResBoundingBox: 0 0 139.3057 69.4434
%%CropBox: 0 0 139.3057 69.4434
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 64 8%%BeginData: 11172 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD12FFAE8383575E57340B0C0B0C0C3559AFFD6EFFAE585E335733%573333050C0B0B050C0B0B050C58FD6AFFA782575D335E575D33340B0C0B%0C0B0C0B0C0B0C0B0C0CAECFFD65FFCF58573357335733573333050B050B%050B050B050B050B050B58A7A7FD34FF5959FD2DFFAD575E575E575E575E%575E0B0C0B0C0B0C0B0C0B0C0B0C0B0C0B0C83AEA7FD11FF0C120C120C12%0CAFFD19FF840B0CFD2BFFAE8233573357335733573357330B050C0B0B05%0C0B0B050C0B0B050C0B3483A783AEFD0FFF0B050C0B0B050C83FD19FF7D%0C0BFD2AFFCF82575D335E575D335E575D33120B0C0B0C0B0C0B0C0B0C0B%0C0B0C0B0C0BA783AD83AEFD0EFF0B0C83FD1EFF840B0CFD29FFAE5E3357%33573357335733573357050B050B050B050B050B050B050B050B050B5883%83A783A8FD0DFF0B0584FD06FF590C0B0C34AFFD04FF59340B0C2EAEFD04%FF7D340B342E0B05FD29FF82575E575E575E575E575E575E330C0B0C0B0C%0B0C0B0C0B0C0B0C0B0C0B0C0B3483AE83AD83FD0DFF0B0C83FD05FF0C0C%0B0C0B0C0BAFFFFF2E0C0B0C0B0C0BA8FFFF590C0B0C0B0C0B0CFD28FF82%3357335733573357335733573333050C0B0B050C0B0B050C0B0B050C0B0B%050C0BA783A783A783FD0CFF0C0B34345934A8340C0B59FF840B0B0BFF59%0B0559FFA80B0C0BFF830C0B0C59A8340B05FD27FFA7335E575D335E575D%335E575D335E330C0B0C0B0C0B0C0B0C0B0C0B0C0B0C0B0C0B1283A783AD%83A783FD0BFF0B0C0B0C0B0C840C0B59FFFFFF840B0CA8120B34FFFFFF84%0B0C84340B0CFFFFFF840B0CFD26FFCF3357335733573357335733573357%3333050B050B050B050B050B050B050B050B050B0BA7838383A7838383FD%0AFF0B05597D847DFF050B7DFFFFFFA80B0584050B59FD04FF0B05590B0B%34FFFFFF7D0B05FD26FF5E5E575E575E575E575E575E575E575E330C0B0C%0B0C0B0C0B0C0B0C0B0C0B0C0B0C0B1283AD83AE83AD83AEAEFD09FF0B0C%84FD04FF0C0B84FD04FF0B0C830C0B84FD04FF0B0C350C0B59FFFFFF840B%0CFD25FFA757335733573357335783833357335783340B0B055F0B0B050C%0B840B0C0B0B0B0C0B0B0BA783A783A783A783A8FD09FF0B0584FD04FF0B%0B59FFFFFFA80C0B84050C59FD04FF0B055F0C0B0CFFFFFF7D0C0BFD25FF%82335E575D335E575D57FFFF83335E83FFA80C0B12FFFF0B0C0BFFFF840B%0C0B83340C0B1283AD83A783AD83A783FD09FF0B0C83FD04FF120B34FFFF%FF830B0CAF340B12FFFFFF840B0C84590B0CA8FFFF840B0CFD24FFAE3357%335733573357335EFFFFA85733FFFFFF050B59FFFF0C050CFFFFA80B0559%8359050B0B8383A7838383A7838383FD08FF0B0584FD04FF590B0512595F%0B0B0CFF590B050C5983050B0BFF840C050C34590B0B05FD24FF825E575E%575E575E575E58FFFFFF575EFFFFFF0C0B83FFFF0C0C0CFFFFAF0B0C58AD%580C0B1283AE83AD83AE83AD83AEFD08FF0B0C83FD05FF340C0B0C0B0C0C%FFFFFF340C0B0C0B0C0CFFFFFF830C0B0C0B0C0B0CFD24FF5E3357335733%5733573382FFFFA85733FFFFFF050C59FFFF120B0CFFFFA80B055F835905%0C0BA783A783A783A783A783AEFD07FF8483FD07FF83340B3459FD05FF83%590C3459FD05FFA859345F84A87DFD23FFCF335E575D335E575D335E5EFF%FFFF575DFFFFFF0C0B83FFFF0C0C0CFFFFAF0B0C58AD580C0B1283A783AD%83A783AD83A783FD08FFA8355959A8FD20FF590C0CFD15FF0C0C84FD06FF%825733573357335733573382FFFFA85733FFFFFF050B59FFFF0C050CFFFF%840B05598359050B0BA7838383A7838383A78383A8FD06FF34050B050B05%59FF590B83FD1BFF59050CFD15FF0B0584FD06FF82575E575E575E575E57%5E5EFFFFFF575EFFFFFF0C0B84FFFF0C0C0CFFFFAF0B0C58AE580C0B1283%AD83AE83AD83AE83AD83FD06FF840B0C0C5F0C0C35FF0C0C35FD1BFF350C%0CFD15FF0B0C83FD06FF575733573357335733573382FFFFA85733FFFFFF%0B0B59FFFF0C0512FFFF840C0B59835F0B0B0BA783A783A783A783A783A7%A8FD05FF340B0BFFFFFFA8AE840C05348384FFFFFF84595983FFFFFF83A8%A8845984FD06FF835983590B0CFFFFA884585F84FFFFAE83FFFF84A8FFFF%AE5983A80C0B84FFFFA88383FF5E575D335E575D335E575D58FFFFFF335E%FFFFFF0C0B83FFFF0C0C0CFFFFAF0B0C58A7580C0B1283AD83A783AD83A7%83AD83AEFD05FF830B0C83FD04FF0C0B0C0B0C0B84590C0B0C0B0C0BFF83%0C0B0C0B0C0B0CA8FFFF830B0C0B0C0B0C0CFF0C0C0B0C0B0C34FFFD040C%0B34AF340B0C0B0C0B0C84A80B0C0B0C0B33573357335733573357335EFF%FFA85733FFFFFF050B59FFFF35050CFFFFA80B05598359050B0B8383A783%8383A7838383A783FD05FFA80B050B7DFFFFFF340C050C3459A859050C2E%59050B5984050B0B592E0B0534FF84050B05342E0B050CFF0B050C2E3405%0CA80C050B0B0C2E34050B05350B0B05842E0B05340B0B5E575E575E575E%575E575E58FFFFFF575EFFFFFF0C0B83FFFF340C0CFFFFAF0B0C58AD580C%0B1283AE83AD83AE83AD83AE83AEFD06FF340C0B0C34FFFFFF0C0C34FFFF%FFA8AEFFFFFF590B12830C0BAFFFFF340C0BFF0C0C0CAFFFFF340C0CFF84%FFFFFFAE0C0B840C0C35FFFFAE0B0C59FFFFFF0B0C840C0B5FFFFFA83357%33573357335733573382FFFFA85733FFFFFF050C59FFFF350B0CFFFFA80B%055F8359050C0BA783A783A783A783A783A7A7FD07FF590B050C0BFFFF12%0B59FD06FF5934050C0C84050CFFFFFF840B0B840C0B83FFFFFF590512FF%FFFFAE340C050C830C0559FFFF340C0BFD04FF0B05840C0B0559A8FF5D33%5E575D335E575D335E5EFFFFFF575DFFFFFF0C0B83FFFF340C0CFFFFAF0B%0C58AD580C0B1283A783AD83A783AD83A783AEFD08FFA80C0B0C34FF0C0C%35FD04FF590B0C0B0C0B12840C0BFFFFFF830C0B840B0C84FFFFFF350C0C%FFA8340B0C0B0C0B840C0C34FFFF590B12FD04FF0B0C83840B0C0B12A833%5733573357335733573382FFFFA85733FFFFFF050B59FFFF34050CFFFF84%0B05598359050B0BA7838383A7838383A7838383FD09FFA80C050BFF0C05%59FFFFFF5F050B2EA8340B0B84050BFFFFFF84050B7D0B0584FFFFFF5905%0CFF0C050C59FF050B7D0C0559FFFF340B0BFD04FF0B0584FFA80B0B0534%5E575E575E575E575E575E5EFFFFFF575EFFFFFF0C0B84FFFF340C0CFFFF%AF0B0C58AE580C0B1283AD83AE83AD83AE83AD83CFFD0AFF340C0BFF0C0C%35FFFFFF0B0C59FFFF590B12840C0BFFFFFF830C0BFF0B0C35FFFFFF350C%0C840B0CFFFFFF0C0B840C0C34FFFF5F0B0CAFFFFFFF0B0C83FFFFFF2E0C%0B585733573357335733573382FFFFA85733FFFFFF0B0B59FFFF340512FF%FF840C0B58835F0B0B0BA783A783A783A783A783A7A8FD05FF343459FF83%0B0512FF340535FF847D0C0B59FFAE0B0B0B840B0BFFFFFF84050CFF3405%0C59FFA80C0B0C340C0BA8FF5F0B0B7D120B59FFFFA80B050CA8FF590C0B%830C84A80C050C83575D335E575D335E575D58FFFFFF335EFFFFFF0C0B83%FFFF340C0CFFFFAF0B0C34A7580C0B1283AD83A783AD83A783AD83FD06FF%120B0C0B0C0B0C84FF590C0B0C0B840B0C0B0C0B0C0B12830C0BFFFFFF84%0C0BFFAF0C0B0C0B0C0B0C0CA80B0C0B0C0B0C0B840C0C35FFFFFF590C0B%0C0B0C0B0C590C0B0C0B0C3483573357335733573357335EFFFFA85733CF%FFFF050B59FFFF35050CFFFFA80B05348359050B0B8383A7838383A78383%83A7FD06FF83350B0B0B3484FFFFFF590C0B34A8AF0C0C0B12340C34A80B%34FFFFFFAE0B12FFFFA8340B0C0C590B59FF840C0C0B340C0CA8590B83FD%04FF7D120B0C2E340BAE59120B3459AFFF575E575E575E575E575E58FFFF%FF575EAEFFFF0C0B83FFFF340C0CFFFFAF0B0C34AD580C0B1283AE83AD83%AE83AD83AEA7FD0AFFAFA8FD43FF5E33573357335733573382FFFFA85733%FFFFFF050C59FFFF350B0CFFFFA80B05348359050C0BA783A783A783A783%A783AEFD09FF830B0C34FD42FF835E575D335E575D335E5EFFFFFF575DA8%FFFF0C0B83FFFF340C0CFFFFAF0B0C34AD580C0B1283A783AD83A783AD83%A7CFFD09FF0C0C0B0CFD43FF33573357335733573382FFFFA85733FFFFFF%050B59FFFF590534FFFF840B05348359050B0BA7838383A7838383A7A7FD%09FFA80B0B0B05A8FD42FF83575E575E575E575E5EFFFFFF57AEFFFFFF12%0CFD04FF12A8FFFFFF0B0C83AE83340B3483AD83AE83AD83AE83FD0AFF5F%0B590C0C34FD04FF830C0C0B340C34FFFFAE350B0C0B59AFFF591234340B%0C0C84FFFFFFAF2E0C0B0C0CAE0C1259FFFFFFA8340CFD12FFA85E335733%5733573382FD0EFFA8FFFFFFA8837DA783A7833483A783A783A783A783AE%FD0AFF0B0C8459050CFFFFFF340B0B050C0B0B05FFA80C050C0B0B0512FF%59050C0B0B050C0B84FFA80B0B050C0B0B0B340B0CFFFFFF590512FD13FF%825E575D335E575D58FD13FF83AD83A783AD83A783AD83A783AD83A7CFFD%09FFA80C0BFFA80C0BA8FF830B0C59FFFF590B0CFF590B0CA8FF840C0B84%350C0BAFFFFF0B0C34FF0B0C0CAFFFAF5984590C0B84FFFF0C0C59FD14FF%575733573357335EFD12FFAE8383A7838383A7838383A7838383A7A8FD0A%FF59050C7D840B0B2EFF0C0B0BFFFFFF7D0B05FF0B0B34847D840B0B2E59%050CFFFFFF34050C840B0584FD06FF0B0B2EFF840B05AFFD14FFCF575E57%5E575E58FD13FF83AE83AD83AE83AD83AE83AD83AEA7FD0BFF0C0C0B0C0B%0C0B12FF0C0B59FFFFFF840B0CFF0C0B0C0B0C0B0C0B12350C0CFFFFFF34%0C0C5F0B0CFD07FF590B0CAE840B34FD16FFA733573357335EFD12FFCFA7%83A783A783A783A783A783A783FD0BFF840C0B593459340B05A80B0B34FF%FFFF7D0C0BFF050C2E593459345959590B0CFFFFFF590512340B05FD07FF%840C0B590C0C59FD17FFA7575D335E57FD13FF83A783AD83A783AD83A783%AD83FD0CFF590B35FD04FF0B0C34120B34FFFFFF840B0CFF0C0B83FD06FF%340C0CFFFFFF350C0C840B0CA8FD07FFFD040C0BFD19FF8233573357A8FD%11FFA7A7838383A7838383A7838383FD0DFF0B0B59FD04FF35050C340B05%59FFFF590B05FF2E0B0BFFFFFFA883FF59050CFFFFFF59050CA80B0512FF%FFFFAF84FFFF83050B0534FD1AFFA7575E5783FD11FFAE83AD83AE83AD83%AE83AD83FD0DFF840C0BFD05FF840C0BA80C0C0B120C0C0B0CFFA80B0C0B%590C0C0B84340C0CFFFFFF350C0CFF350C0B1235120B34FFFFFF120B0C84%FD1BFFA8335757FD11FF83A783A783A783A783A7A7FD0EFF590B34FD06FF%0B0B34FF2E0B050C0B0B05FFFF840B0C0B0B0B34FF590512FFFFFF590B34%FFFF340B050C0B0B58FFFFFF340C0BFD1EFF585E83FD0FFFA7A783AD83A7%83AD83A7A8FD0FFFA884AFFD06FFAF84FD04FF84FF830B0CFD04FF848484%FD04FF84A8FFFFFFA884AFFFFFFFAF8483AFFD05FF340B59FD1FFF835EA8%FD0DFFA8A7838383A7838383A8AEFD1BFF84347DFFFFA80B0B0BFD1FFF05%0B84FD21FFAEAEFD0CFFAE83AD83AE83ADA8FD1EFF590B0C0B0C0B0C0B83%FD1EFF0C0C0CFD2EFFAEA783A783A783AEFD20FFA8340B0C0B0B0B84FD1E%FF830C0BA8FD2DFFA8AEA7AEA8FD4BFF83FD4FFFA85782FD13FFAE58CFFD%21FF8382FD44FF575E83FD13FFA85EA8FD21FF5E82FD44FF5782FFFFFFA8%AEFD06FFA7FD06FFCFA8AE33AEFD06FFA8FD05FFA8AEAEFD12FF8258FD42%FFA75E575D33FF585D335E82FFFFA7575D3382FFFFA882575D575EA8FD04%FF82335E575DA7FF825D335E82FF3382FFFFA85E83FFFF5E83FFFF8257FF%5882FFCF5782FD3FFFA75758AE5857A7FF825783A83382AEA83382FF5833%83A88233AEFFFFFF8233A7A88333A8825783FF8257828233FFFF8333FFFF%FF3383FFFF5757FF5E57AE335EA8FD40FF57A7FF5E82FFFFFF5782825EFF%FFFF8357AE5783FFFFA85EA8FFFFCF5783FFFFA85EA88258FFFFFF588283%5EA7FF5883FFFFFF5E83FFFF8257FF58825782CFFD41FF5782FF3383FFFF%FF82585E33FFFFFF8257835783FFFFAE33AEFFFFA75783FFFFAE33AE3382%FFFFFF8233FF3382A85783FFFFFF3383FFFF5757FF5E335783FD42FF33A7%FF5D82FFFFFF5782825DFFFFFF8333AE57A7FFFFA85DA7FFFFCF3383FFFF%A75EA85E58FFFFFF585EFF8333A757FD04FF5D82FFFF8233FF5882585EA8%FD41FF5782FF585783FF835782A73383A8CF335EA85833A8FF8233A8A782%AE5E33A7A78333AE585783FFA75758FF83573382FF8358FF3357A8FF5757%FF8258FF3358AEFD40FF57A7FFFF585E575E58FFFF83575E575EA8FFAE5E%575E575EA88357CFCF82575E585EA8FF585E575E58FFFFFF575EA7FF5882%FFAE575E575E57FF5E82FFAE5782FD45FFA7AEA8FD04FFCFA7AEFD05FFAE%A8FD0AFF8333AEFFFFA8AEA8FD05FFA8FFFFFFA8FFFFFFA7FD66FF578383%A7575ECFFD79FFA758583382A8FD24FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Basic CMYK</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-02-22T12:21:04Z</xap:CreateDate>
         <xap:ModifyDate>2010-02-22T12:21:04Z</xap:ModifyDate>
         <xap:MetadataDate>2010-02-22T12:21:04Z</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>128</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAgAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FWmZVUsxCqoqzHY&#xA;ADFWC+Y/za0TTmaDTU/SVyuxdTxgU/6+/L/Y7e+a/N2hGO0fUfscLLrYx2G5efar+Zfm/UGP+mG0&#xA;iPSK1Hp0/wBnu/8Aw2a7Jrckute5wZ6vJLrTB/NPmm5tIOc873N5NX0hK7P06s1SdhktLp5ZpbnY&#xA;c3Dy5j37vN7m6uLmZpp5DJK3VmzfwgIihsHETDSvNXmbSGrperXdl4rBPJGp3ruqkA7+OTZQySh9&#xA;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&#xA;kLM9FXYDkxZtvnlkYiIocmcYgCgrZJL/AP/Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:60C396653321DF119B429B46F1CA70FE</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:1EF2CC133F21DF119B429B46F1CA70FE</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:CD37302DCF17DF11831CFD2041F2141B</stRef:instanceID>
            <stRef:documentID>uuid:CC37302DCF17DF11831CFD2041F2141B</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic CMYK</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>100.000012</stDim:w>
            <stDim:h>100.000012</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>White</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Black</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Red</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Yellow</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Green</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Cyan</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Blue</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Magenta</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=15 M=100 Y=90 K=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>14.999998</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>90.000000</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=90 Y=85 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>90.000000</xapG:magenta>
                           <xapG:yellow>85.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=80 Y=95 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>80.000000</xapG:magenta>
                           <xapG:yellow>95.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=50 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=35 Y=85 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>35.000004</xapG:magenta>
                           <xapG:yellow>85.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=5 M=0 Y=90 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>5.000001</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>90.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=20 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>19.999998</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=85 M=10 Y=100 K=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>85.000000</xapG:cyan>
                           <xapG:magenta>10.000002</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=90 M=30 Y=95 K=30</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>90.000000</xapG:cyan>
                           <xapG:magenta>30.000002</xapG:magenta>
                           <xapG:yellow>95.000000</xapG:yellow>
                           <xapG:black>30.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=0 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=80 M=10 Y=45 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>80.000000</xapG:cyan>
                           <xapG:magenta>10.000002</xapG:magenta>
                           <xapG:yellow>45.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=70 M=15 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>70.000000</xapG:cyan>
                           <xapG:magenta>14.999998</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=85 M=50 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>85.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=95 Y=5 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>95.000000</xapG:magenta>
                           <xapG:yellow>5.000001</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=100 Y=25 K=25</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>25.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=100 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=100 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=35 M=100 Y=35 K=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>35.000004</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>35.000004</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=10 M=100 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>10.000002</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=95 Y=20 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>95.000000</xapG:magenta>
                           <xapG:yellow>19.999998</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=25 Y=40 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>39.999996</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=45 Y=50 K=5</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999996</xapG:cyan>
                           <xapG:magenta>45.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>5.000001</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=50 Y=60 K=25</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>60.000004</xapG:yellow>
                           <xapG:black>25.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=55 M=60 Y=65 K=40</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>55.000000</xapG:cyan>
                           <xapG:magenta>60.000004</xapG:magenta>
                           <xapG:yellow>65.000000</xapG:yellow>
                           <xapG:black>39.999996</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=40 Y=65 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>39.999996</xapG:magenta>
                           <xapG:yellow>65.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=30 M=50 Y=75 K=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>30.000002</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=35 M=60 Y=80 K=25</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>35.000004</xapG:cyan>
                           <xapG:magenta>60.000004</xapG:magenta>
                           <xapG:yellow>80.000000</xapG:yellow>
                           <xapG:black>25.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=65 Y=90 K=35</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999996</xapG:cyan>
                           <xapG:magenta>65.000000</xapG:magenta>
                           <xapG:yellow>90.000000</xapG:yellow>
                           <xapG:black>35.000004</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=70 Y=100 K=50</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999996</xapG:cyan>
                           <xapG:magenta>70.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>50.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=70 Y=80 K=70</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>70.000000</xapG:magenta>
                           <xapG:yellow>80.000000</xapG:yellow>
                           <xapG:black>70.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=90</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>229</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=80</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>203</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=70</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>178</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=60</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>152</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=50</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>127</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=40</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>101</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=30</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>76</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=20</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>50</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=10</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>25</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=5</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>12</xapG:gray>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -69.4434 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 69.4434 li
139.306 69.4434 li
139.306 0 li
cp
clp
[1 0 0 1 0 0 ]ct
62.4375 18.7407 mo
62.2305 18.7397 62.0684 18.5698 62.0664 18.3647 cv
62.0664 18.3647 li
62.0664 5.10303 li
62.0684 4.89746 62.2305 4.729 62.4375 4.72754 cv
62.4375 4.72754 li
69.4092 4.72754 li
69.624 4.72754 69.8018 4.89453 69.8018 5.10303 cv
69.8018 5.10303 li
69.8018 6.13135 li
69.791 6.35596 69.6094 6.50049 69.4092 6.50684 cv
69.4092 6.50684 li
64.3203 6.50684 li
64.3203 10.4224 li
68.4014 10.4224 li
68.6104 10.4243 68.7725 10.5918 68.7744 10.7974 cv
68.7744 10.7974 li
68.7744 11.8057 li
68.7725 12.0112 68.6074 12.1792 68.4014 12.1816 cv
68.4014 12.1816 li
64.3203 12.1816 li
64.3203 18.3647 li
64.3184 18.5708 64.1553 18.7397 63.9482 18.7407 cv
63.9482 18.7407 li
62.4375 18.7407 li
62.4375 18.7407 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
1 0 0.71 0.43 cmyk
f
72.7314 16.5444 mo
73.1396 17.0562 73.835 17.3516 74.6904 17.3516 cv
74.6904 17.3516 li
76.5117 17.3384 77.3799 16.1636 77.4023 13.5127 cv
77.4023 13.5127 li
77.3799 10.8618 76.5137 9.7085 74.6689 9.69385 cv
74.6689 9.69385 li
72.8252 9.7085 71.9805 10.8394 71.957 13.5537 cv
71.957 13.5537 li
71.959 15.0654 72.1748 15.8569 72.7305 16.5435 cv
72.7305 16.5435 li
74.6689 7.9751 mo
76.2236 7.97461 77.4854 8.49365 78.3506 9.4541 cv
78.3506 9.4541 li
79.2139 10.4136 79.6758 11.8003 79.6758 13.5127 cv
79.6758 13.5127 li
79.6758 15.2158 79.209 16.6099 78.3506 17.5825 cv
78.3506 17.5825 li
77.4932 18.5532 76.25 19.0898 74.7383 19.0898 cv
74.7383 19.0898 li
74.7324 19.0898 li
74.7314 19.0898 li
73.1855 19.0913 71.9141 18.5552 71.0381 17.5864 cv
71.0381 17.5864 li
70.1602 16.6167 69.6846 15.2261 69.6846 13.5327 cv
69.6846 13.5327 li
69.6846 11.8306 70.1504 10.439 71.0156 9.47314 cv
71.0156 9.47314 li
71.8789 8.50439 73.1357 7.97461 74.6689 7.9751 cv
74.6689 7.9751 li
f
83.7139 16.5444 mo
84.123 17.0562 84.8203 17.3516 85.6738 17.3516 cv
85.6738 17.3516 li
87.4961 17.3384 88.3643 16.1636 88.3848 13.5127 cv
88.3848 13.5127 li
88.3643 10.8618 87.499 9.7085 85.6543 9.69385 cv
85.6543 9.69385 li
83.8076 9.7085 82.9639 10.8394 82.9414 13.5537 cv
82.9414 13.5537 li
82.9424 15.0654 83.1592 15.8569 83.7139 16.5435 cv
83.7139 16.5435 li
85.6543 7.9751 mo
87.2061 7.97461 88.4688 8.49365 89.333 9.4541 cv
89.333 9.4541 li
90.1982 10.4136 90.6592 11.8003 90.6592 13.5127 cv
90.6592 13.5127 li
90.6592 15.2158 90.1943 16.6099 89.335 17.5825 cv
89.335 17.5825 li
88.4775 18.5532 87.2324 19.0898 85.7207 19.0898 cv
85.7207 19.0898 li
85.7129 19.0898 li
85.7129 19.0898 li
84.1709 19.0913 82.8975 18.5552 82.0215 17.5864 cv
82.0215 17.5864 li
81.1455 16.6167 80.668 15.2261 80.668 13.5327 cv
80.668 13.5327 li
80.668 11.8306 81.1328 10.439 81.998 9.47314 cv
81.998 9.47314 li
82.8594 8.50439 84.1191 7.97461 85.6543 7.9751 cv
85.6543 7.9751 li
f
97.1201 9.71436 mo
96.124 9.71533 95.332 10.0474 94.7734 10.7109 cv
94.7734 10.7109 li
94.1777 11.4028 93.9688 12.103 93.9658 13.5747 cv
93.9658 13.5747 li
93.9785 15.8677 95.124 17.1548 97.0996 17.1665 cv
97.0996 17.1665 li
97.4883 17.1665 97.8789 17.1069 98.2031 17.0083 cv
98.2031 17.0083 li
98.8633 16.77 98.9873 16.6143 99.0068 16.062 cv
99.0068 16.062 li
99.0068 10.8813 li
98.9971 10.4067 98.9131 10.2515 98.6348 10.062 cv
98.6348 10.062 li
98.2666 9.83691 97.7275 9.71436 97.127 9.71436 cv
97.127 9.71436 li
97.1201 9.71436 li
97.1201 9.71436 li
cp
93.0449 17.4307 mo
92.1738 16.4849 91.6895 15.1343 91.6895 13.5127 cv
91.6895 13.5127 li
91.6963 10.2832 93.7695 7.98145 96.6982 7.9751 cv
96.6982 7.9751 li
97.4277 7.97803 98.1875 8.13916 98.6582 8.45557 cv
98.6582 8.45557 li
98.8486 8.59229 li
98.9531 8.65088 98.9648 8.65869 99.0068 8.66113 cv
99.0068 8.66113 li
99.0068 4.50488 li
99.0117 4.25586 99.207 4.05322 99.459 4.04834 cv
99.459 4.04834 li
100.728 4.04834 li
100.995 4.04883 101.179 4.27051 101.18 4.50488 cv
101.18 4.50488 li
101.18 18.2827 li
101.177 18.5327 100.979 18.7368 100.728 18.7407 cv
100.728 18.7407 li
99.6807 18.7407 li
99.4258 18.7407 99.2275 18.5352 99.21 18.2773 cv
99.21 18.2773 li
99.1426 18.2876 99.0791 18.3101 98.9951 18.3569 cv
98.9951 18.3569 li
98.8193 18.436 li
98.1914 18.7573 97.4609 18.9058 96.6768 18.9058 cv
96.6768 18.9058 li
95.1729 18.9067 93.916 18.3755 93.0449 17.4307 cv
93.0449 17.4307 li
cp
f
61.752 31.875 mo
61.8711 31.8716 61.9814 31.9204 62.1611 32.0454 cv
62.1611 32.0454 li
62.7881 32.4956 63.9033 32.8237 64.7949 32.8213 cv
64.7949 32.8213 li
66.2119 32.8081 67.0352 32.0645 67.0439 30.8726 cv
67.0439 30.8726 li
67.0439 30.5405 66.9854 30.231 66.8779 29.9707 cv
66.8779 29.9707 li
66.7061 29.6079 66.5215 29.4131 65.8359 28.9185 cv
65.8359 28.9185 li
63.4629 27.2329 li
63.0313 26.9404 62.6777 26.645 62.4277 26.3472 cv
62.4277 26.3472 li
61.8926 25.7573 61.585 24.8823 61.583 23.9644 cv
61.583 23.9644 li
61.5811 22.8193 61.9873 21.876 62.7295 21.23 cv
62.7295 21.23 li
63.4707 20.5825 64.5371 20.2368 65.8428 20.2368 cv
65.8428 20.2368 li
66.8506 20.2378 67.9717 20.4438 68.7666 20.8052 cv
68.7666 20.8052 li
68.9922 20.8735 69.1309 21.0737 69.0947 21.3325 cv
69.0947 21.3325 li
69.0947 22.5044 li
69.0938 22.626 69.0898 22.7212 69.04 22.8174 cv
69.04 22.8174 li
68.9854 22.9199 68.8594 22.9683 68.7637 22.9624 cv
68.7637 22.9624 li
68.6289 22.9673 68.5176 22.9072 68.3564 22.771 cv
68.3564 22.771 li
67.6533 22.2729 66.8398 21.9961 65.9443 21.9951 cv
65.9443 21.9951 li
64.6025 22.0088 63.8447 22.6724 63.8359 23.7588 cv
63.8359 23.7588 li
63.8447 24.4321 64.0723 24.8311 64.8799 25.4038 cv
64.8799 25.4038 li
67.3574 27.1099 li
68.8682 28.1431 69.5049 29.1587 69.499 30.5845 cv
69.499 30.5845 li
69.499 31.7944 69.0459 32.8037 68.2402 33.4995 cv
68.2402 33.4995 li
67.4326 34.1968 66.2813 34.5796 64.8965 34.5796 cv
64.8965 34.5796 li
63.8682 34.5781 62.6533 34.395 61.8809 34.0771 cv
61.8809 34.0771 li
61.5566 33.9751 61.3623 33.7827 61.3799 33.5049 cv
61.3799 33.5049 li
61.3799 32.2725 li
61.3828 32.0752 61.5273 31.876 61.752 31.875 cv
61.752 31.875 li
f
70.1094 25.5532 mo
69.8574 25.5479 69.6611 25.3452 69.6582 25.0957 cv
69.6582 25.0957 li
69.6582 24.2734 li
69.6611 24.0234 69.8574 23.8188 70.1094 23.8145 cv
70.1094 23.8145 li
71.0684 23.8145 li
71.0684 21.5381 li
71.0703 21.3013 71.2539 21.0801 71.5215 21.0801 cv
71.5215 21.0801 li
72.79 21.0801 li
73.04 21.0845 73.2373 21.2876 73.2422 21.5381 cv
73.2422 21.5381 li
73.2422 23.8145 li
75.9932 23.8145 li
76.2441 23.8188 76.4414 24.0234 76.4473 24.2734 cv
76.4473 24.2734 li
76.4473 25.0957 li
76.4473 25.3623 76.2295 25.5522 75.9932 25.5532 cv
75.9932 25.5532 li
73.2422 25.5522 li
73.2422 31.3667 li
73.2705 32.4614 73.5947 32.8159 74.543 32.8413 cv
74.543 32.8413 li
74.8828 32.8423 75.2227 32.7627 75.498 32.6138 cv
75.498 32.6138 li
75.7363 32.4829 li
75.8477 32.438 75.9414 32.4092 76.0332 32.4092 cv
76.0332 32.4092 li
76.1533 32.4072 76.2715 32.4604 76.3418 32.5532 cv
76.3418 32.5532 li
76.416 32.645 76.4473 32.7622 76.4473 32.8887 cv
76.4473 32.8887 li
76.4473 33.6274 li
76.4658 33.8452 76.3535 34.0571 76.1445 34.1299 cv
76.1445 34.1299 li
75.6016 34.4155 74.7275 34.5781 73.9795 34.5796 cv
73.9795 34.5796 li
73.0752 34.5806 72.3438 34.3291 71.8369 33.8472 cv
71.8369 33.8472 li
71.333 33.3647 71.0674 32.6606 71.0684 31.7979 cv
71.0684 31.7979 li
71.0684 25.5532 li
70.1094 25.5532 li
f
81.4629 29.6587 mo
81.4629 29.6587 li
79.832 30.2339 79.5254 30.564 79.5098 31.5317 cv
79.5098 31.5317 li
79.5244 32.4155 80.0156 32.8198 81.2139 32.8413 cv
81.2139 32.8413 li
81.7969 32.8413 82.3857 32.7217 82.8408 32.5278 cv
82.8408 32.5278 li
83.2764 32.291 83.3213 32.2412 83.3418 31.6338 cv
83.3418 31.6338 li
83.3418 28.9878 li
81.4658 29.6577 li
77.2363 31.6128 mo
77.2334 30.6401 77.707 29.7847 78.5498 29.248 cv
78.5498 29.248 li
79.2549 28.7837 80.3086 28.3101 81.3877 27.9556 cv
81.3877 27.9556 li
82.8535 27.4634 li
83.2891 27.2832 83.3262 27.2378 83.3418 26.9668 cv
83.3418 26.9668 li
83.3418 26.5142 li
83.3242 25.7129 82.9277 25.4146 81.7578 25.3896 cv
81.7578 25.3896 li
80.7178 25.3872 79.5244 25.6948 78.8193 26.1445 cv
78.8193 26.1445 li
78.6445 26.2695 78.5166 26.3184 78.3721 26.314 cv
78.3721 26.314 li
78.2549 26.3149 78.1387 26.2783 78.0576 26.1943 cv
78.0576 26.1943 li
77.9746 26.1104 77.9395 25.9951 77.9414 25.8774 cv
77.9414 25.8774 li
77.9414 25.0547 li
77.9316 24.7656 77.998 24.54 78.21 24.4136 cv
78.21 24.4136 li
78.8799 23.9907 80.6787 23.6558 82.0195 23.6504 cv
82.0195 23.6504 li
83.1475 23.6509 84.0244 23.8896 84.6289 24.3892 cv
84.6289 24.3892 li
85.2314 24.8882 85.5361 25.6421 85.5342 26.5962 cv
85.5342 26.5962 li
85.5342 33.9575 li
85.5303 34.2065 85.335 34.4111 85.082 34.4155 cv
85.082 34.4155 li
84.0566 34.4155 li
83.9033 34.4155 83.7617 34.3779 83.6641 34.2715 cv
83.6641 34.2715 li
83.5791 34.1758 83.5488 34.0557 83.543 33.9243 cv
83.543 33.9243 li
83.4111 33.9307 83.3398 33.9531 83.1494 34.0308 cv
83.1494 34.0308 li
82.7881 34.1953 li
82.2686 34.4355 81.417 34.5781 80.749 34.5796 cv
80.749 34.5796 li
78.7012 34.5767 77.2383 33.3721 77.2363 31.6128 cv
77.2363 31.6128 li
cp
f
88.9512 24.3276 mo
89.1064 24.3276 89.1924 24.2993 89.4824 24.1743 cv
89.4824 24.1743 li
89.7441 24.0718 89.8779 24.0112 89.9678 23.9888 cv
89.9678 23.9888 li
90.5908 23.7568 91.2148 23.6504 91.875 23.6504 cv
91.875 23.6504 li
92.9912 23.6494 93.9209 23.9956 94.5703 24.6343 cv
94.5703 24.6343 li
95.2158 25.2725 95.5723 26.1948 95.5713 27.3159 cv
95.5713 27.3159 li
95.5713 33.9561 li
95.5674 34.2065 95.3711 34.4111 95.1191 34.4146 cv
95.1191 34.4146 li
93.8291 34.4146 li
93.8291 34.4146 li
93.5762 34.4111 93.3809 34.2065 93.377 33.9561 cv
93.377 33.9561 li
93.377 27.604 li
93.3535 26.0474 92.7295 25.4126 91.2109 25.3882 cv
91.2109 25.3882 li
90.7207 25.3882 90.2344 25.4688 89.834 25.6245 cv
89.834 25.6245 li
89.2783 25.856 89.1572 26.0405 89.1426 26.5342 cv
89.1426 26.5342 li
89.1426 33.9561 li
89.1377 34.2065 88.9434 34.4111 88.6914 34.4146 cv
88.6914 34.4146 li
87.4209 34.4146 li
87.1689 34.4111 86.9736 34.2065 86.9697 33.9561 cv
86.9697 33.9561 li
86.9697 24.2734 li
86.9736 24.0239 87.1689 23.8179 87.4209 23.8145 cv
87.4209 23.8145 li
88.4072 23.8145 li
88.5801 23.8169 88.7168 23.8276 88.8271 23.937 cv
88.8271 23.937 li
88.9307 24.0483 88.9385 24.1812 88.9404 24.3276 cv
88.9404 24.3276 li
88.9512 24.3276 li
f
102.194 25.3882 mo
101.198 25.3901 100.403 25.7212 99.8467 26.3862 cv
99.8467 26.3862 li
99.2529 27.0776 99.041 27.7778 99.0371 29.2495 cv
99.0371 29.2495 li
99.0518 31.5435 100.196 32.8301 102.174 32.8413 cv
102.174 32.8413 li
102.561 32.8413 102.951 32.7822 103.275 32.6831 cv
103.275 32.6831 li
103.938 32.4448 104.061 32.2896 104.08 31.7368 cv
104.08 31.7368 li
104.08 26.5552 li
104.07 26.0825 103.986 25.9268 103.706 25.7363 cv
103.706 25.7363 li
103.341 25.5103 102.801 25.3882 102.2 25.3882 cv
102.2 25.3882 li
102.194 25.3882 li
102.194 25.3882 li
cp
98.1162 33.1055 mo
97.2471 32.1597 96.7637 30.8101 96.7637 29.1875 cv
96.7637 29.1875 li
96.7676 25.9575 98.8428 23.6558 101.771 23.6504 cv
101.771 23.6504 li
102.499 23.6528 103.26 23.814 103.73 24.1299 cv
103.73 24.1299 li
103.922 24.2661 li
104.025 24.3257 104.037 24.3325 104.08 24.3345 cv
104.08 24.3345 li
104.08 20.1807 li
104.083 19.9316 104.279 19.7271 104.532 19.7222 cv
104.532 19.7222 li
105.8 19.7222 li
106.066 19.7222 106.253 19.9448 106.253 20.1807 cv
106.253 20.1807 li
106.253 33.9561 li
106.249 34.2075 106.051 34.4111 105.8 34.4155 cv
105.8 34.4155 li
104.752 34.4155 li
104.497 34.4146 104.299 34.2104 104.281 33.9517 cv
104.281 33.9517 li
104.215 33.9624 104.15 33.9854 104.069 34.0317 cv
104.069 34.0317 li
103.896 34.1113 li
103.265 34.4321 102.534 34.5796 101.751 34.5796 cv
101.751 34.5796 li
100.245 34.5806 98.9902 34.0513 98.1162 33.1055 cv
98.1162 33.1055 li
cp
f
111.512 29.6587 mo
111.512 29.6587 li
109.881 30.2339 109.574 30.564 109.558 31.5317 cv
109.558 31.5317 li
109.572 32.4155 110.064 32.8198 111.263 32.8413 cv
111.263 32.8413 li
111.847 32.8413 112.434 32.7217 112.89 32.5278 cv
112.89 32.5278 li
113.325 32.291 113.37 32.2412 113.39 31.6338 cv
113.39 31.6338 li
113.39 28.9878 li
111.515 29.6577 li
107.283 31.6128 mo
107.281 30.6401 107.757 29.7847 108.6 29.248 cv
108.6 29.248 li
109.303 28.7837 110.358 28.3101 111.437 27.9556 cv
111.437 27.9556 li
112.903 27.4634 li
113.338 27.2832 113.375 27.2378 113.39 26.9668 cv
113.39 26.9668 li
113.39 26.5142 li
113.372 25.7129 112.975 25.4146 111.807 25.3896 cv
111.807 25.3896 li
110.768 25.3872 109.572 25.6948 108.867 26.1445 cv
108.867 26.1445 li
108.69 26.2695 108.565 26.3184 108.422 26.314 cv
108.422 26.314 li
108.304 26.3149 108.186 26.2783 108.104 26.1943 cv
108.104 26.1943 li
108.022 26.1104 107.987 25.9951 107.987 25.8774 cv
107.987 25.8774 li
107.987 25.0547 li
107.98 24.7656 108.047 24.5396 108.26 24.4136 cv
108.26 24.4136 li
108.927 23.9907 110.727 23.6558 112.068 23.6504 cv
112.068 23.6504 li
113.197 23.6509 114.073 23.8896 114.677 24.3892 cv
114.677 24.3892 li
115.28 24.8882 115.585 25.6421 115.583 26.5962 cv
115.583 26.5962 li
115.583 33.9575 li
115.579 34.2075 115.381 34.4111 115.131 34.4155 cv
115.131 34.4155 li
114.104 34.4155 li
113.952 34.4155 113.81 34.3779 113.714 34.2715 cv
113.714 34.2715 li
113.627 34.1758 113.598 34.0557 113.593 33.9243 cv
113.593 33.9243 li
113.461 33.9307 113.389 33.9531 113.197 34.0308 cv
113.197 34.0308 li
112.837 34.1953 li
112.317 34.4355 111.467 34.5781 110.799 34.5796 cv
110.799 34.5796 li
108.749 34.5767 107.287 33.3721 107.283 31.6128 cv
107.283 31.6128 li
cp
f
117.369 34.4146 mo
117.116 34.4111 116.92 34.2065 116.916 33.9561 cv
116.916 33.9561 li
116.916 24.2734 li
116.92 24.0225 117.116 23.8188 117.369 23.8145 cv
117.369 23.8145 li
118.396 23.8145 li
118.536 23.8145 118.667 23.8442 118.763 23.937 cv
118.763 23.937 li
118.859 24.0308 118.889 24.1606 118.889 24.292 cv
118.889 24.292 li
118.889 24.4897 li
118.996 24.4834 119.065 24.4604 119.256 24.3657 cv
119.256 24.3657 li
120.07 23.9482 120.619 23.8135 121.462 23.8145 cv
121.462 23.8145 li
121.82 23.8169 122.062 23.8398 122.246 23.9497 cv
122.246 23.9497 li
122.438 24.0649 122.501 24.2788 122.495 24.499 cv
122.495 24.499 li
122.495 25.4253 li
122.495 25.6704 122.343 25.9233 122.065 25.9243 cv
122.065 25.9243 li
122.026 25.9214 121.961 25.9277 121.882 25.8965 cv
121.882 25.8965 li
121.791 25.8784 li
121.422 25.7993 120.859 25.7373 120.451 25.7378 cv
120.451 25.7378 li
119.272 25.7725 119.019 25.9653 118.989 26.8022 cv
118.989 26.8022 li
118.989 33.9561 li
118.989 34.1929 118.815 34.4126 118.558 34.4146 cv
118.558 34.4146 li
117.369 34.4146 li
117.369 34.4146 li
cp
f
127.872 25.3882 mo
126.875 25.3901 126.082 25.7212 125.526 26.3862 cv
125.526 26.3862 li
124.931 27.0776 124.722 27.7778 124.716 29.2495 cv
124.716 29.2495 li
124.732 31.5435 125.875 32.8301 127.853 32.8413 cv
127.853 32.8413 li
128.239 32.8413 128.63 32.7822 128.954 32.6831 cv
128.954 32.6831 li
129.616 32.4448 129.738 32.2896 129.757 31.7368 cv
129.757 31.7368 li
129.757 26.5552 li
129.749 26.0825 129.667 25.9268 129.385 25.7363 cv
129.385 25.7363 li
129.019 25.5103 128.481 25.3882 127.877 25.3882 cv
127.877 25.3882 li
127.875 25.3882 127.873 25.3882 127.873 25.3882 cv
127.872 25.3882 li
cp
123.798 33.1055 mo
122.926 32.1597 122.443 30.8101 122.443 29.1875 cv
122.443 29.1875 li
122.449 25.9575 124.522 23.6558 127.448 23.6504 cv
127.448 23.6504 li
128.178 23.6528 128.938 23.814 129.411 24.1299 cv
129.411 24.1299 li
129.602 24.2671 li
129.703 24.3257 129.716 24.3325 129.757 24.3345 cv
129.757 24.3345 li
129.757 20.1807 li
129.763 19.9307 129.958 19.7271 130.21 19.7222 cv
130.21 19.7222 li
131.479 19.7222 li
131.746 19.7222 131.93 19.9448 131.932 20.1807 cv
131.932 20.1807 li
131.932 33.9561 li
131.928 34.2065 131.729 34.4111 131.479 34.4155 cv
131.479 34.4155 li
130.432 34.4155 li
130.178 34.4146 129.978 34.2104 129.961 33.9517 cv
129.961 33.9517 li
129.892 33.9614 129.83 33.9839 129.747 34.0308 cv
129.747 34.0308 li
129.574 34.1113 li
128.941 34.4321 128.212 34.5796 127.43 34.5796 cv
127.43 34.5796 li
125.923 34.5806 124.667 34.0513 123.798 33.1055 cv
123.798 33.1055 li
cp
f
135.073 29.7686 mo
134.286 29.3169 133.96 29.0757 133.631 28.7158 cv
133.631 28.7158 li
133.156 28.2314 132.922 27.5688 132.923 26.7603 cv
132.923 26.7603 li
132.922 25.8115 133.256 25.0234 133.864 24.4814 cv
133.864 24.4814 li
134.474 23.9409 135.343 23.6504 136.398 23.6504 cv
136.398 23.6504 li
137.183 23.6494 137.814 23.8003 138.557 24.1157 cv
138.557 24.1157 li
138.947 24.27 139.129 24.4595 139.106 24.7661 cv
139.106 24.7661 li
139.106 25.7119 li
139.104 25.9277 138.984 26.1694 138.733 26.1704 cv
138.733 26.1704 li
138.585 26.1694 138.471 26.1045 138.315 26.0049 cv
138.315 26.0049 li
137.495 25.5186 137.081 25.3921 136.378 25.3896 cv
136.378 25.3896 li
135.488 25.4097 135.11 25.73 135.096 26.4321 cv
135.096 26.4321 li
135.097 26.7642 135.221 27.0483 135.45 27.2466 cv
135.45 27.2466 li
135.612 27.396 135.868 27.5571 136.371 27.8452 cv
136.371 27.8452 li
137.137 28.2969 li
137.985 28.7925 138.374 29.0942 138.692 29.5073 cv
138.692 29.5073 li
139.078 30.0137 139.306 30.7368 139.306 31.4282 cv
139.306 31.4282 li
139.306 32.3794 138.953 33.1782 138.318 33.729 cv
138.318 33.729 li
137.686 34.2788 136.787 34.5796 135.711 34.5796 cv
135.711 34.5796 li
134.868 34.5796 134.12 34.4312 133.315 34.1157 cv
133.315 34.1157 li
132.883 33.9653 132.694 33.7632 132.721 33.4238 cv
132.721 33.4238 li
132.721 32.5386 li
132.723 32.417 132.743 32.3047 132.81 32.2104 cv
132.81 32.2104 li
132.876 32.1147 132.994 32.0566 133.114 32.0591 cv
133.114 32.0591 li
133.236 32.0557 133.355 32.1001 133.472 32.1851 cv
133.472 32.1851 li
134.24 32.647 134.914 32.8413 135.61 32.8413 cv
135.61 32.8413 li
136.619 32.8267 137.125 32.4048 137.134 31.6748 cv
137.134 31.6748 li
137.13 31.1567 136.881 30.7886 136.304 30.4688 cv
136.304 30.4688 li
135.719 30.1401 li
135.073 29.7686 li
f
64.5146 43.5 mo
68.0156 43.5 li
66.2656 37.9746 li
64.5146 43.5 li
64.5146 43.5 li
cp
70.0322 49.8223 mo
68.5342 45.0938 li
63.9766 45.0938 li
62.458 49.8223 li
62.458 49.8223 li
62.4102 49.998 62.2598 50.0879 62.1162 50.0898 cv
62.1162 50.0898 li
60.9248 50.0898 li
60.8105 50.0898 60.7109 50.0762 60.6201 50.0117 cv
60.6201 50.0117 li
60.5283 49.9453 60.4912 49.8311 60.4951 49.7344 cv
60.4951 49.7344 li
60.4951 49.6934 60.4951 49.6934 60.4951 49.6719 cv
60.4951 49.6719 li
60.4951 49.6445 li
60.5039 49.6191 li
60.583 49.4199 li
64.8965 36.936 li
65.0352 36.5488 li
65.1553 36.0889 65.4502 35.8823 65.9844 35.9106 cv
65.9844 35.9106 li
66.8281 35.9106 li
67.1895 35.9106 67.3818 35.9292 67.5498 36.0698 cv
67.5498 36.0698 li
67.5498 36.0708 li
67.749 36.2104 67.8506 36.4961 67.999 36.9185 cv
67.999 36.9185 li
72.1709 49.4004 li
72.2236 49.5703 li
72.2725 49.6484 72.2549 49.7012 72.2607 49.7344 cv
72.2607 49.7344 li
72.2646 49.8496 72.1953 49.9688 72.0977 50.0215 cv
72.0977 50.0215 li
72 50.0742 71.8936 50.0898 71.7686 50.0898 cv
71.7686 50.0898 li
70.3965 50.0898 li
70.3926 50.0898 70.3906 50.0898 70.3906 50.0898 cv
70.3896 50.0898 li
70.2266 50.0898 70.0879 49.9746 70.0322 49.8223 cv
70.0322 49.8223 li
cp
f
79.0752 41.4883 mo
78.7109 41.2246 78.1143 41.0625 77.4307 41.0645 cv
77.4307 41.0645 li
75.4561 41.0762 74.3516 42.3574 74.335 44.7383 cv
74.335 44.7383 li
74.3477 46.9688 75.5225 48.3438 77.3906 48.3516 cv
77.3906 48.3516 li
77.9678 48.3516 78.5977 48.1924 79.0127 47.9785 cv
79.0127 47.9785 li
79.3213 47.7949 79.3633 47.7207 79.377 47.3301 cv
79.377 47.3301 li
79.377 42.1074 li
79.3604 41.6992 79.3584 41.6992 79.0791 41.4902 cv
79.0791 41.4902 li
73.2002 53.7383 mo
72.7627 53.5762 72.5488 53.3662 72.5654 53.0254 cv
72.5654 53.0254 li
72.5654 52.1621 li
72.5664 51.916 72.709 51.6621 72.9785 51.6621 cv
72.9785 51.6621 li
73.1084 51.6641 73.2158 51.7168 73.3125 51.7617 cv
73.3125 51.7617 li
73.5713 51.9043 li
74.3477 52.3232 75.5459 52.6094 76.5234 52.6074 cv
76.5234 52.6074 li
77.4287 52.6094 78.2295 52.4043 78.7344 52.0596 cv
78.7344 52.0596 li
79.165 51.7451 79.373 51.2598 79.377 50.2695 cv
79.377 50.2695 li
79.377 49.4609 li
79.3496 49.4736 79.3125 49.4922 79.248 49.5205 cv
79.248 49.5205 li
78.4873 49.9199 77.7754 50.0898 77.0068 50.0898 cv
77.0068 50.0898 li
75.5313 50.0918 74.2871 49.5605 73.4199 48.6289 cv
73.4199 48.6289 li
72.5518 47.6973 72.0615 46.373 72.0615 44.7998 cv
72.0615 44.7998 li
72.0615 43.1934 72.5869 41.8232 73.501 40.8555 cv
73.501 40.8555 li
74.4141 39.8848 75.7109 39.3242 77.2295 39.3242 cv
77.2295 39.3242 li
77.8506 39.3242 78.4326 39.4297 78.9092 39.6309 cv
78.9092 39.6309 li
79.0352 39.6943 79.2217 39.7988 79.4336 39.9375 cv
79.4336 39.9375 li
79.5225 39.9814 79.542 39.9941 79.5801 40 cv
79.5801 40 li
79.5801 39.9883 li
79.5801 39.8457 79.6055 39.7207 79.6924 39.6211 cv
79.6924 39.6211 li
79.7783 39.5234 79.9053 39.4883 80.0293 39.4883 cv
80.0293 39.4883 li
81.0977 39.4883 li
81.3652 39.4883 81.5488 39.7109 81.5508 39.9473 cv
81.5508 39.9473 li
81.5508 50.168 li
81.5508 51.5137 81.1162 52.5723 80.2725 53.2832 cv
80.2725 53.2832 li
79.4268 53.9922 78.1992 54.3457 76.624 54.3457 cv
76.624 54.3457 li
75.4561 54.3457 74.1162 54.1191 73.2002 53.7383 cv
73.2002 53.7383 li
cp
f
89.835 43.418 mo
89.835 43.3945 89.835 43.375 89.835 43.3613 cv
89.835 43.3613 li
89.8281 41.9766 88.8887 41.0527 87.4492 41.043 cv
87.4492 41.043 li
86.084 41.0469 85.0918 42.0078 85.0049 43.418 cv
85.0049 43.418 li
89.835 43.418 li
89.835 43.418 li
cp
84.1748 48.8008 mo
83.3008 47.8662 82.8232 46.5234 82.8232 44.9023 cv
82.8232 44.9023 li
82.8232 43.2119 83.2676 41.8184 84.083 40.8438 cv
84.083 40.8438 li
84.8994 39.8672 86.0898 39.3223 87.5254 39.3242 cv
87.5254 39.3242 li
88.8701 39.3242 90.001 39.8027 90.7852 40.6504 cv
90.7852 40.6504 li
91.5713 41.4971 92.0098 42.7031 92.0098 44.1406 cv
92.0098 44.1406 li
92.0098 44.6973 li
92.0098 44.9336 91.8252 45.1563 91.5576 45.1563 cv
91.5576 45.1563 li
84.9971 45.1563 li
85.0176 47.1953 86.2441 48.5078 88.1318 48.5156 cv
88.1318 48.5156 li
88.7988 48.5176 89.7109 48.2383 90.5029 47.7715 cv
90.5029 47.7715 li
90.6396 47.7031 li
90.7686 47.6113 90.9033 47.5938 90.9951 47.5918 cv
90.9951 47.5918 li
91.2529 47.5918 91.4268 47.8232 91.4268 48.0703 cv
91.4268 48.0703 li
91.4268 48.8721 li
91.4512 49.2207 91.2793 49.4473 90.8955 49.582 cv
90.8955 49.582 li
90.0049 50.0039 88.8613 50.2539 87.8301 50.2539 cv
87.8301 50.2539 li
86.3057 50.2549 85.0449 49.7344 84.1748 48.8008 cv
84.1748 48.8008 li
cp
f
95.2051 40.0039 mo
95.3584 40.002 95.4482 39.9756 95.7363 39.8496 cv
95.7363 39.8496 li
95.998 39.748 96.1309 39.6855 96.2207 39.6641 cv
96.2207 39.6641 li
96.8408 39.4316 97.4668 39.3252 98.1279 39.3252 cv
98.1279 39.3252 li
99.2451 39.3242 100.176 39.6699 100.821 40.3086 cv
100.821 40.3086 li
101.47 40.9473 101.823 41.8691 101.823 42.9902 cv
101.823 42.9902 li
101.823 49.6328 li
101.82 49.8809 101.625 50.0859 101.374 50.0898 cv
101.374 50.0898 li
100.083 50.0898 li
100.083 50.0898 li
99.832 50.0859 99.6348 49.8828 99.6309 49.6328 cv
99.6309 49.6328 li
99.6309 43.2793 li
99.6064 41.7227 98.9824 41.0879 97.4639 41.0645 cv
97.4639 41.0645 li
96.9746 41.0625 96.4873 41.1426 96.085 41.3008 cv
96.085 41.3008 li
95.5322 41.5313 95.4102 41.7148 95.3965 42.209 cv
95.3965 42.209 li
95.3965 49.6328 li
95.3916 49.8828 95.1943 50.084 94.9443 50.0898 cv
94.9443 50.0898 li
93.6748 50.0898 li
93.4229 50.0859 93.2256 49.8828 93.2227 49.6328 cv
93.2227 49.6328 li
93.2227 39.9473 li
93.2256 39.6973 93.4229 39.4932 93.6748 39.4883 cv
93.6748 39.4883 li
94.6621 39.4883 li
94.833 39.4912 94.9707 39.5039 95.0811 39.6113 cv
95.0811 39.6113 li
95.1846 39.7236 95.1914 39.8555 95.1943 40.0039 cv
95.1943 40.0039 li
95.2051 40.0039 li
f
111.168 47.7344 mo
111.423 47.7402 111.578 47.9824 111.578 48.2539 cv
111.578 48.2539 li
111.578 49.0781 li
111.594 49.3438 111.468 49.5615 111.234 49.6621 cv
111.234 49.6621 li
110.513 50.0293 109.336 50.2529 108.265 50.2539 cv
108.265 50.2539 li
106.652 50.2549 105.348 49.7549 104.452 48.8145 cv
104.452 48.8145 li
103.555 47.877 103.077 46.5127 103.077 44.8203 cv
103.077 44.8203 li
103.077 43.1357 103.592 41.7559 104.539 40.8008 cv
104.539 40.8008 li
105.486 39.8457 106.854 39.3242 108.527 39.3242 cv
108.527 39.3242 li
109.413 39.3242 110.3 39.4922 111.117 39.8477 cv
111.117 39.8477 li
111.412 39.9375 111.593 40.1367 111.578 40.3789 cv
111.578 40.3789 li
111.578 41.3457 li
111.578 41.5898 111.437 41.8438 111.168 41.8438 cv
111.168 41.8438 li
111.035 41.8467 110.94 41.8008 110.772 41.7012 cv
110.772 41.7012 li
109.938 41.2383 109.311 41.0645 108.487 41.0645 cv
108.487 41.0645 li
106.469 41.0762 105.369 42.3359 105.352 44.7383 cv
105.352 44.7383 li
105.369 47.1816 106.514 48.5039 108.527 48.5156 cv
108.527 48.5156 li
109.244 48.5156 109.985 48.3184 110.707 47.9102 cv
110.707 47.9102 li
110.792 47.876 li
110.922 47.79 111.039 47.7363 111.168 47.7344 cv
111.168 47.7344 li
f
119.67 39.9834 mo
119.758 39.6465 120.007 39.4668 120.316 39.4883 cv
120.316 39.4883 li
121.163 39.4883 li
121.314 39.4902 121.438 39.502 121.549 39.5576 cv
121.549 39.5576 li
121.66 39.6055 121.744 39.7402 121.735 39.8652 cv
121.735 39.8652 li
121.736 39.9766 121.704 40.0684 121.646 40.2031 cv
121.646 40.2031 li
118.322 49.4961 li
117.898 50.7109 li
117.513 51.7666 117.069 52.7969 116.721 53.4453 cv
116.721 53.4453 li
116.336 54.1641 115.819 54.5107 115.066 54.5107 cv
115.066 54.5107 li
115.058 54.5107 115.046 54.5107 115.036 54.5107 cv
115.036 54.5107 li
114.854 54.5107 li
114.666 54.5098 114.517 54.4961 114.393 54.3955 cv
114.393 54.3955 li
114.268 54.2891 114.242 54.1357 114.242 53.9707 cv
114.242 53.9707 li
114.242 53.2109 li
114.242 52.9023 114.384 52.6094 114.695 52.6084 cv
114.695 52.6084 li
114.876 52.6084 li
115.031 52.5977 115.064 52.582 115.191 52.3691 cv
115.191 52.3691 li
115.386 52.0547 115.603 51.5879 115.806 51.0195 cv
115.806 51.0195 li
116.246 49.8184 li
112.422 40.2949 li
112.342 40.1133 112.308 40.0215 112.308 39.9063 cv
112.308 39.9063 li
112.303 39.7773 112.37 39.6436 112.479 39.5781 cv
112.479 39.5781 li
112.588 39.5098 112.716 39.4902 112.861 39.4883 cv
112.861 39.4883 li
113.969 39.4883 li
114.319 39.4746 114.591 39.6436 114.693 39.9561 cv
114.693 39.9561 li
117.403 47.1016 li
119.67 39.9844 li
f
12.9668 44.2285 mo
12.9209 16.6309 li
12.9209 15.5278 13.5703 14.6313 14.3779 14.6255 cv
15.1162 14.6255 15.7227 15.3696 15.8281 16.3379 cv
15.8574 38.6895 li
15.8633 39.7969 16.5176 40.6924 17.3184 40.6924 cv
18.0967 40.6934 18.7266 39.8652 18.7764 38.8242 cv
18.7764 38.7969 li
18.7764 38.7607 18.7803 38.7227 18.7803 38.6836 cv
18.7471 16.5156 li
18.7822 15.4595 19.418 14.6187 20.1963 14.6167 cv
20.8623 14.6187 21.4258 15.2334 21.6025 16.0732 cv
21.5918 11.458 li
21.5732 11.458 li
21.5605 7.11572 24.2783 2.07178 28.1016 0.00634766 cv
21.1436 -0.140137 14.1328 2.33838 8.66504 7.48682 cv
-2.41504 17.9189 -2.9375 35.3506 7.49121 46.4336 cv
10.1777 49.2891 13.3369 51.4395 16.7363 52.8848 cv
14.7891 50.6846 13.6885 48.0469 13.1191 45.6504 cv
13.0537 45.3711 12.9668 44.5527 12.9668 44.2285 cv
0.59 0 1 0.07 cmyk
f
41.9727 11.0645 mo
42.0195 38.6602 li
42.0215 39.7676 41.3662 40.6621 40.5635 40.6631 cv
39.8271 40.6641 39.2236 39.9199 39.1172 38.9531 cv
39.082 16.6021 li
39.0781 15.4932 38.4219 14.6021 37.6172 14.5952 cv
36.8447 14.6021 36.2129 15.4316 36.1641 16.4736 cv
36.1641 16.4927 li
36.1641 16.5313 36.1602 16.5703 36.1641 16.6045 cv
36.1953 38.7793 li
36.1563 39.8359 35.5195 40.6729 34.7422 40.6758 cv
34.0732 40.6777 33.5127 40.0586 33.335 39.2207 cv
33.3652 43.7861 li
33.374 43.832 li
33.377 48.0352 30.835 52.9023 27.1982 55.0879 cv
34.0918 55.1738 41.0195 52.6992 46.4404 47.5996 cv
57.5137 37.1685 58.0342 19.7344 47.6074 8.6543 cv
44.7686 5.64551 41.4111 3.41455 37.8027 1.9707 cv
39.9668 4.20361 41.4736 7.35986 41.8252 10.1777 cv
41.917 10.4419 41.9727 10.7407 41.9727 11.0645 cv
0.24 0 0.4 0.03 cmyk
f
28.1016 0.00634766 mo
24.2783 2.07178 21.5605 7.11572 21.5654 11.4604 cv
21.5762 11.481 li
21.6025 16.0732 li
21.6025 16.0732 li
21.6387 38.6836 li
21.6426 39.7891 22.2998 40.6855 23.1035 40.6816 cv
23.6777 40.6816 24.1689 40.2246 24.4043 39.5625 cv
24.415 39.5547 24.417 39.5469 24.417 39.5371 cv
24.4463 39.4473 24.4766 39.3496 24.4961 39.248 cv
24.4961 39.2207 24.5088 39.1973 24.5146 39.1699 cv
24.5283 39.084 24.5352 38.9961 24.5449 38.9063 cv
24.5479 38.832 24.5605 38.7617 24.5586 38.6895 cv
24.543 16.9272 li
24.5479 16.4912 li
24.5811 15.728 24.9346 15.084 25.416 14.7915 cv
25.4307 14.7852 25.4395 14.7739 25.4473 14.7676 cv
25.4658 14.7612 25.4736 14.7583 25.4893 14.7495 cv
25.6484 14.6597 25.8311 14.6118 26.0176 14.6089 cv
26.7051 14.6089 27.2813 15.2661 27.4414 16.1465 cv
27.457 16.2593 li
27.4707 16.3735 27.458 16.5024 27.4668 16.6206 cv
27.502 39.0244 li
27.6211 39.959 28.2197 40.6777 28.9385 40.6719 cv
29.124 40.6729 29.3008 40.6191 29.4648 40.5352 cv
29.4727 40.5352 29.4824 40.5352 29.4873 40.5332 cv
29.502 40.5195 29.5098 40.5059 29.5293 40.4941 cv
30.0322 40.1826 30.3799 39.4834 30.3799 38.6787 cv
30.3711 16.7793 li
30.3838 16.479 li
30.3838 16.4492 30.3916 16.415 30.3955 16.3853 cv
30.3984 16.2974 30.4121 16.2065 30.4277 16.1245 cv
30.4307 16.0977 30.4395 16.0732 30.4424 16.0459 cv
30.4629 15.9468 30.4893 15.8442 30.5205 15.7495 cv
30.5303 15.729 li
30.7637 15.0586 31.2598 14.5972 31.8369 14.6011 cv
32.6436 14.5972 33.2988 15.4971 33.2988 16.6021 cv
33.335 39.2227 li
33.5127 40.0586 34.0732 40.6729 34.7422 40.6758 cv
35.5195 40.6729 36.1563 39.8359 36.1953 38.7793 cv
36.1641 16.6079 li
36.1602 16.5703 36.1641 16.5313 36.1641 16.4927 cv
36.1641 16.4736 li
36.2129 15.4282 36.8447 14.6021 37.6172 14.5952 cv
38.4219 14.6021 39.0781 15.4932 39.082 16.6021 cv
39.1172 38.9531 li
39.2236 39.9199 39.8271 40.666 40.5635 40.6631 cv
41.3662 40.6621 42.0195 39.7676 42.0195 38.6602 cv
41.9727 11.062 li
41.9727 10.7407 41.9482 10.4106 41.9063 10.1006 cv
41.4824 7.29102 39.9668 4.20166 37.8027 1.9707 cv
34.6992 0.730469 31.4063 0.0678711 28.1016 0.00634766 cv
1 0 0.71 0.43 cmyk
f
27.1982 55.0879 mo
31.0205 53.0234 33.3838 48.1484 33.3799 43.8027 cv
33.3691 43.7822 li
33.3428 39.1914 li
33.3428 39.1914 li
33.3086 16.5801 li
33.3027 15.4751 32.6455 14.5771 31.8428 14.5825 cv
31.2676 14.5825 30.7773 15.0376 30.541 15.7012 cv
30.5303 15.7085 30.5293 15.7173 30.5293 15.7261 cv
30.499 15.8169 30.4717 15.9141 30.4502 16.0146 cv
30.4502 16.0435 30.4395 16.0669 30.4316 16.0942 cv
30.417 16.1792 30.4121 16.2666 30.4023 16.3589 cv
30.3984 16.4321 30.3848 16.5024 30.3887 16.5757 cv
30.4063 38.3359 li
30.3984 38.7734 li
30.3662 39.5352 30.0098 40.1807 29.5313 40.4717 cv
29.5146 40.4785 29.5059 40.4902 29.498 40.498 cv
29.4795 40.502 29.4707 40.5059 29.4561 40.5156 cv
29.2969 40.6035 29.1152 40.6523 28.9287 40.6563 cv
28.2422 40.6563 27.6631 39.998 27.5049 39.1172 cv
27.4893 39.0059 li
27.4766 38.8887 27.4873 38.7617 27.4814 38.6445 cv
27.4434 16.2402 li
27.3252 15.3032 26.7256 14.5864 26.0078 14.5918 cv
25.8213 14.5908 25.6455 14.6436 25.4814 14.73 cv
25.4727 14.73 25.4648 14.73 25.46 14.7319 cv
25.4434 14.7446 25.4336 14.7583 25.417 14.769 cv
24.9141 15.083 24.5654 15.7798 24.5654 16.5845 cv
24.5742 38.4854 li
24.5615 38.7852 li
24.5615 38.8145 24.5547 38.8496 24.5508 38.8789 cv
24.5479 38.9688 24.5352 39.0566 24.5176 39.1387 cv
24.5166 39.166 24.5088 39.1914 24.5029 39.2188 cv
24.4854 39.3164 24.457 39.4189 24.4248 39.5137 cv
24.416 39.5332 li
24.1797 40.2051 23.6855 40.666 23.1094 40.6641 cv
22.3018 40.666 21.6484 39.7676 21.6484 38.6621 cv
21.6084 16.04 li
21.4336 15.2046 20.8721 14.5908 20.2041 14.5874 cv
19.4258 14.5908 18.7891 15.4282 18.752 16.4839 cv
18.7822 38.6563 li
18.7871 38.6943 18.7822 38.7324 18.7822 38.7705 cv
18.7822 38.7891 li
18.7324 39.8359 18.0996 40.6631 17.3301 40.667 cv
16.5264 40.6631 15.8672 39.7695 15.8643 38.6621 cv
15.8301 16.3101 li
15.7217 15.3452 15.1182 14.5972 14.3838 14.6021 cv
13.5811 14.6021 12.9248 15.4971 12.9248 16.6035 cv
12.9727 44.2031 li
12.9727 44.5234 12.998 44.8535 13.042 45.165 cv
13.4629 47.9727 14.5732 50.6543 16.7363 52.8848 cv
19.8398 54.125 23.8936 55.0273 27.1982 55.0879 cv
0 0 0 0 cmyk
f
63.457 66.125 mo
63.457 66.2441 63.3525 66.3477 63.2344 66.3477 cv
62.292 66.3477 li
62.1719 66.3477 62.0664 66.2441 62.0664 66.125 cv
62.0664 59.9023 li
61.0938 59.9023 li
60.9756 59.9023 60.8711 59.7988 60.8711 59.6787 cv
60.8711 59.0801 li
60.8711 58.9609 60.9756 58.8574 61.0938 58.8574 cv
62.0664 58.8574 li
62.0664 58.0039 li
62.0664 57.1211 62.2471 56.6426 62.7236 56.2695 cv
63.1289 55.9395 63.6826 55.7607 64.2344 55.7607 cv
64.8486 55.7607 65.2363 55.9102 65.2363 56.165 cv
65.2363 56.7773 li
65.2363 56.9121 65.1777 57.002 65.0869 57.002 cv
65.042 57.002 64.9834 56.9863 64.9248 56.957 cv
64.7891 56.8965 li
64.6846 56.8535 64.5039 56.8076 64.3545 56.8076 cv
63.7422 56.8076 63.457 57.1523 63.457 57.9141 cv
63.4727 58.8574 li
64.9248 58.8574 li
65.042 58.8574 65.1475 58.9609 65.1475 59.0801 cv
65.1475 59.709 li
65.1475 59.8438 65.0723 59.9023 64.9248 59.9023 cv
63.457 59.9023 li
63.457 66.125 li
cp
0.59 0 1 0.07 cmyk
f
67.4385 64.9277 mo
67.7666 65.332 68.3203 65.5547 68.9785 65.5547 cv
70.3994 65.5547 71.1016 64.5996 71.1016 62.6543 cv
71.1016 60.7109 70.3994 59.7686 68.9629 59.7686 cv
67.5293 59.7686 66.8408 60.6953 66.8408 62.6836 cv
66.8408 63.791 67.0059 64.4063 67.4385 64.9277 cv
cp
68.9629 58.7373 mo
71.2227 58.7373 72.5684 60.2012 72.5684 62.6543 cv
72.5684 65.0918 71.2061 66.6016 69.0068 66.6016 cv
66.7646 66.6016 65.374 65.0918 65.374 62.6699 cv
65.374 60.2324 66.7354 58.7373 68.9629 58.7373 cv
cp
f
75.4346 64.9277 mo
75.7627 65.332 76.3164 65.5547 76.9766 65.5547 cv
78.3955 65.5547 79.0986 64.5996 79.0986 62.6543 cv
79.0986 60.7109 78.3955 59.7686 76.96 59.7686 cv
75.5244 59.7686 74.8359 60.6953 74.8359 62.6836 cv
74.8359 63.791 75.001 64.4063 75.4346 64.9277 cv
cp
76.96 58.7373 mo
79.2178 58.7373 80.5645 60.2012 80.5645 62.6543 cv
80.5645 65.0918 79.2031 66.6016 77.0039 66.6016 cv
74.7617 66.6016 73.3711 65.0918 73.3711 62.6699 cv
73.3711 60.2324 74.7324 58.7373 76.96 58.7373 cv
cp
f
86.4658 60.0527 mo
86.167 59.873 85.75 59.7832 85.2852 59.7832 cv
84.5234 59.7832 83.8955 60.0371 83.4609 60.5469 cv
82.9971 61.0684 82.832 61.623 82.832 62.6992 cv
82.832 64.4063 83.7451 65.4219 85.2705 65.4219 cv
85.5693 65.4219 85.8682 65.375 86.1221 65.3008 cv
86.6318 65.1367 86.7969 64.9434 86.7969 64.5078 cv
86.7969 60.7402 li
86.7969 60.3809 86.7061 60.2012 86.4658 60.0527 cv
cp
86.9287 66.0039 mo
86.8252 66.0039 86.7373 66.0195 86.6318 66.0801 cv
86.4961 66.1387 li
86.0459 66.3633 85.5244 66.4668 84.9561 66.4668 cv
82.7725 66.4668 81.3672 64.9707 81.3672 62.6543 cv
81.3672 60.3516 82.8623 58.7373 84.9707 58.7373 cv
85.4941 58.7373 86.0459 58.8574 86.3613 59.0664 cv
86.5098 59.1699 li
86.6172 59.2305 86.6455 59.2451 86.7666 59.2305 cv
86.7969 59.2305 li
86.7969 56.1055 li
86.7969 55.9844 86.8994 55.8809 87.0195 55.8809 cv
87.9619 55.8809 li
88.0957 55.8809 88.1855 55.9844 88.1855 56.1055 cv
88.1855 66.125 li
88.1855 66.2441 88.082 66.3477 87.9619 66.3477 cv
87.1846 66.3477 li
87.0508 66.3477 86.9453 66.2441 86.9453 66.0938 cv
86.9453 66.0039 li
86.9287 66.0039 li
cp
f
90.707 64.4336 mo
91.4541 64.4336 91.7656 64.748 91.7656 65.4805 cv
91.7656 66.168 91.4395 66.4668 90.6748 66.4668 cv
89.9434 66.4668 89.6289 66.1543 89.6289 65.4355 cv
89.6289 64.748 89.9736 64.4336 90.707 64.4336 cv
cp
f
97.5273 60.1133 mo
97.2285 59.9023 96.7637 59.7832 96.2402 59.7832 cv
94.7158 59.7832 93.834 60.8008 93.834 62.5664 cv
93.834 64.2246 94.7607 65.3008 96.2119 65.3008 cv
96.6602 65.3008 97.1387 65.1816 97.4688 65.0176 cv
97.7207 64.8828 97.7969 64.748 97.7969 64.4492 cv
97.7969 60.6504 li
97.7969 60.3516 97.751 60.2617 97.5273 60.1133 cv
cp
97.542 65.9453 mo
96.9893 66.2285 96.4814 66.3477 95.9268 66.3477 cv
93.7881 66.3477 92.3691 64.8516 92.3691 62.6094 cv
92.3691 60.3223 93.8926 58.7373 96.0908 58.7373 cv
96.5391 58.7373 96.958 58.8105 97.2881 58.9463 cv
97.377 58.9902 97.5137 59.0664 97.6768 59.1699 cv
97.7656 59.2148 97.7969 59.2305 97.8848 59.2305 cv
97.9463 59.2148 li
97.9463 59.1104 li
97.9463 58.9316 98.0205 58.8574 98.1699 58.8574 cv
98.9629 58.8574 li
99.0977 58.8574 99.1865 58.9609 99.1865 59.0801 cv
99.1865 66.5117 li
99.1865 68.4258 97.9463 69.4434 95.6426 69.4434 cv
94.79 69.4434 93.8027 69.2793 93.1445 69.0098 cv
92.8164 68.875 92.7402 68.8008 92.7402 68.5918 cv
92.7402 67.9629 li
92.7402 67.8145 92.8164 67.709 92.9375 67.709 cv
92.9951 67.709 93.0703 67.7383 93.1299 67.7676 cv
93.3252 67.873 li
93.9238 68.1875 94.8203 68.3965 95.5684 68.3965 cv
96.2568 68.3965 96.8691 68.2461 97.2725 67.9785 cv
97.6309 67.7227 97.7969 67.3203 97.7969 66.5879 cv
97.7969 65.8711 li
97.6914 65.8711 97.6768 65.8848 97.542 65.9453 cv
cp
f
102.401 64.9277 mo
102.731 65.332 103.283 65.5547 103.94 65.5547 cv
105.363 65.5547 106.065 64.5996 106.065 62.6543 cv
106.065 60.7109 105.363 59.7686 103.927 59.7686 cv
102.491 59.7686 101.802 60.6953 101.802 62.6836 cv
101.802 63.791 101.968 64.4063 102.401 64.9277 cv
cp
103.927 58.7373 mo
106.185 58.7373 107.53 60.2012 107.53 62.6543 cv
107.53 65.0918 106.169 66.6016 103.972 66.6016 cv
101.729 66.6016 100.338 65.0918 100.338 62.6699 cv
100.338 60.2324 101.697 58.7373 103.927 58.7373 cv
cp
f
113.324 59.0059 mo
113.354 58.916 113.443 58.8574 113.548 58.8574 cv
114.312 58.8574 li
114.476 58.8574 114.58 58.916 114.58 59.0508 cv
114.58 59.0801 114.548 59.1563 114.521 59.2598 cv
112.247 65.7637 li
112.187 65.9297 112.114 66.1387 112.067 66.2441 cv
111.964 66.4238 111.858 66.4668 111.516 66.4668 cv
110.887 66.4668 li
110.469 66.4668 110.363 66.3926 110.229 66.0195 cv
110.155 65.7949 li
107.866 59.2598 li
107.835 59.1855 107.819 59.126 107.819 59.0664 cv
107.819 58.916 107.927 58.8574 108.165 58.8574 cv
109.107 58.8574 li
109.212 58.8574 109.287 58.916 109.316 59.0059 cv
111.319 65.1074 li
113.324 59.0059 li
cp
f
115.439 64.4336 mo
116.188 64.4336 116.5 64.748 116.5 65.4805 cv
116.5 66.168 116.171 66.4668 115.409 66.4668 cv
114.675 66.4668 114.361 66.1543 114.361 65.4355 cv
114.361 64.748 114.705 64.4336 115.439 64.4336 cv
cp
f
122.137 66.0645 mo
121.703 66.2285 li
121.211 66.4082 120.806 66.4668 120.269 66.4668 cv
118.652 66.4668 117.68 65.6016 117.68 64.1348 cv
117.68 59.0801 li
117.68 58.9609 117.785 58.8574 117.905 58.8574 cv
118.86 58.8574 li
118.982 58.8574 119.086 58.9609 119.086 59.0801 cv
119.086 63.7012 li
119.086 64.3906 119.235 64.8379 119.565 65.0625 cv
119.881 65.3008 120.313 65.4219 120.792 65.4219 cv
121.075 65.4219 121.403 65.375 121.732 65.2871 cv
122.271 65.1367 122.437 64.957 122.437 64.5547 cv
122.437 59.0801 li
122.437 58.9609 122.539 58.8574 122.661 58.8574 cv
123.617 58.8574 li
123.735 58.8574 123.842 58.9609 123.842 59.0801 cv
123.842 66.125 li
123.842 66.2441 123.735 66.3477 123.617 66.3477 cv
122.811 66.3477 li
122.676 66.3477 122.585 66.2578 122.585 66.1094 cv
122.585 65.9883 li
122.405 65.9883 122.315 66.0039 122.137 66.0645 cv
cp
f
127.052 61.8184 mo
127.097 61.8184 127.155 61.7734 127.218 61.7285 cv
129.906 59.0059 li
130.027 58.8711 130.056 58.8574 130.205 58.8574 cv
131.089 58.8574 li
131.238 58.8574 131.329 58.9316 131.329 59.0361 cv
131.329 59.126 131.284 59.2148 131.18 59.3203 cv
128.321 62.1621 li
131.269 65.8848 li
131.372 66.0039 131.402 66.0801 131.402 66.1543 cv
131.402 66.2871 131.313 66.3477 131.134 66.3477 cv
130.071 66.3477 li
129.878 66.3477 129.788 66.3027 129.654 66.1094 cv
127.275 62.9238 li
127.187 62.7891 127.155 62.7754 127.038 62.7754 cv
126.992 62.7754 li
126.992 66.125 li
126.992 66.2441 126.901 66.3477 126.768 66.3477 cv
125.75 66.3477 li
125.63 66.3477 125.526 66.2441 125.526 66.125 cv
125.526 56.1055 li
125.526 55.9844 125.63 55.8809 125.75 55.8809 cv
126.768 55.8809 li
126.901 55.8809 126.992 55.9844 126.992 56.1055 cv
126.992 61.832 li
127.052 61.8184 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 13.0.2%%For: (Keane, Jerome) ()%%Title: (FSA_Master_Food.eps)%%CreationDate: 2/22/10 12:21 PM%AI9_DataStream%Gb",KMdd@=p[InYH&$oNMEnb>fc-mfE^d?+V2-6<VTkDrd\Q$"npgN)>is7*P"i4_UhL:3BmOqTkF=R,RGI5re-;+cVqZ]")uOcd%*;X6uM9DIm^S@U3Zh&&.8NN;S;K7jF`-.EaG=-'1<Kn/)O1=1>!VC+8N[JIRIs`pi*2fQ/IF&oA7sE/LGO9kT7G@&:r[ufKmGk[P%Sa+,NFfX7i>D(m;HX)R]%`2K>F`#RoFaf^J*MpZcA`YEFqla_0T183,.?'"R)>p^ggm`E6!uNi]4?S8>,J4T$VU(%^GRW4,!\WD3%J+V`I)_Za,fC$g0l'q*S4D^(jKDqp@4SI7rm(CpkVaS1u]Li1m:*g3H4S,Ig&(FG140BZ*U+cqtG<A*mGkajUDT231<=Y7n7.>d)%AGf("lDB'g/O*tlGPgF:k`dM[kT2O\Wl+@8p]#bg0D6nG<2'-'f:P`_l0tU"GKe!++!s+cUHp9p5qb#dX4Kgq3:q6tGAcoW4a`HR%@H@a-$1d(n3Hk$@=H`XV]6'E7nG#-5592j2]Nq]R"UPHr(K=ikoZF2nLF=&nI#a>!1!LFm^^<6*9/F1B4:[*5aW(nofE&)4j'h[V%[sqIh(qkAPluo[WNF6^S,9eVBoomH-@gdsNa(\mj%t[i3P`=]_Pt-Tl_:)>E]mdTJ6_`R\W62?Y4#IS2I\T&D"4VI%`c'=Ub-cG'%PW&jHq*)NJ+hf<1^=VZPomQc*qfpZcnZ)'LeQ*')F0@:9<agf6Kd!l36YmKlXd4p6,hN<c0Z<]2_;7b8Xc`fki?s#n<qSM^Wn4Lg%]oH1ZF_oNAiRLsZ%'b#WL"BN\m_]kt^5NTKaB,XE>ke3F%_cF'U^>q`("+@lnhm3Khm!VgK^VI@E.[s2:&'`u+[u0d,;Gg8A>BLg%O`()V:o"E\A8^u9fF$l[GAP`C+\^Gl0kVO`(R[qkc97S9`h%0_gj""\>h2GLn3:`Co\hll`%/o.o/0i/r/Ih?5$;=V$MR!cn/_Nq%l?N9tSM<V?^1/[h&)VXI=\>'b4?q+>14YaMr5b<]I`uqN`I&?50]e6V@a95g]KEL$(UoKUfES;ga[GEu2cIt&OZn05<\3-!+7k0_%i]FS7l:O,^fqLRP3M(eu>@^iH7ALAIB1ZN7&A=/_A\KsDb]TMDq1b9[M?n'X41:=*H$&K#fD-LucC2l'b\PM:i=T8cO6&=LG4&;_%&T,cL9DFan5"iB+I3sHr4-Li8oPBeHbLnp!7`%a`ST.#9'msS!*g_5bY!`6Y2d8^Ps78@eP5XNm9(CflDuNhl#m,il^\M4Nn_`#<%rYNWQG9"f]Z2Rh,ns/Q#s/X]Fn*E"5/+#/3%*<ti^Li]0c@5@La8BFoNbaF=]WV1Ar5HF%5#9^/ct^'sX&X#VId@;:cjV+*3Am^0%5BT0rP%q&J#b0HnLkDQ8X`.k@*TSE;Q8SP`&4:g.</k>t7Vk>N-NBBo!Q2L:_ou+teo@Pef!,B776He3cs/Oop=>l&T-1:+eYq$f%<N?i[6.0Lm%D\[R1hAn-H-i(NIHDpNX%aSYFb+%Ff97;p*;SQF]Z!8JbYobcH.2Q2O3JV<GAWda^4P#^S?^V[`L4F]q`J*4i8-.p%'fe+o>PS_Qk0c*2F.0;+kA8S:4B'_'/"nhu'h<1$:L2g<bcaYJd\8/na`&.l@BAC.Lhjshq$Qr_d-@m+GYQ%MTbWA%#kO=:.i0mW%`.;OW%rg@O$?Rq+BB"<&3FOTd5/8-iPY&K2Q1P87Yk]+\9PBM0^b81To!rASF,i(f^Ic^^Xn3-3<[Z)kG@)MkW\JGsrXM=?iIr*\%joIfL1#iGh2.&VHA)]4`1."^+Pp=0$5\tm%rddn2nSH9m"1C)LWR35K/,j$MX2ZQoW4*1FT#Z_b^hsJ2U+^13jsj#=Ah02H&81MZ%^K[XH<L1rRM&NXV:aVherl0H+99<GBm"FJc>.8aqKSl_%\Vh*Wba6a\BjE'bL;/^A@]QRP$$-r.Xu&>hepJfiSqZsUlmeZN!,Mb%%KmB76DmI\Q9:;XpAJ?k[`G<u/hmVSarD,!C-[`/-hu`g&>fi%#o=(;_")sSY@=Wfc/FShq"qf7:3!6?p<:k5UNAfTHT?fQ/3#lME%1ChlH^aG=HZqR`#1>G4!n-gMC1$C".pQPe2[&UYp[E0E(ce;G*_AU-A@-Ukr;89qS-S3<H$tlm4`7(5'C]`2jn(8ge,CVB^\K/$-%e-K-EcY!SeOqh,)bD2OYR'FWV)K4W7r`%Ko'+_oPK8p,?iHB9CV@DD%%eJCFP^klok\gg.q*&;d(i+t2ZFC'f@P<MkFlkUZ:lF'[%ju#fTS5bF8Nf\=8F[XYJ*fHgR^qX=GKR(]OQlGBNN"%Zblq>7f[;B^)H1iT.)Y(=7KZ=j`V_#,"eM1N`nJuoXR,-/=%(PG7mjC:;%FY(kmk43Id@aQs9b[qJL/$8`=lpF<ZC[<luNMVm!'Cous11P#e&pa!IoPTOccH)ne^q43u]@,!3Cmmm<'Rb]W/WQ$!nsaUjfd^T9%etl`8@pegeaVpW<P&6-P:Z,c!JW6KJ^cXO/;e(00ir]adgDKb)`oEd%`4kG3'oRo'64IRU]lljqi+e4697Jh00?Q"Z%QmF(S;be@%")Upd8%-fOCC>`DMgd=En&U[\.=4d0/p8KOlR\@V[LQi=XhS"+VsT8Jh#<N[Y%ru2'">:tDIkJW;66$IOVa,SMk[ZXW($#r^*\t#%9\KDjbE$a@CQmBfeg$#YI*8gjrP?fdP:RBla,pg[i^b#fe$)*3DrO$AHQm?l'?)d\q%SQ]%u,Uhb%NVT:-Q,/NtC/.2@b#(mmj_n%KUJa"fSoIPpi"Xg4`A2IA[+Gn'FD-SFcKD.<],$DU?qqHC>qmnp9WUj/R4N;/b;QP9-XV-)i.R!k`[D:7UIE)T'ZMhYoLH33nk"o%g5DIm-G`fBA\bk'$8LAeVT9Bi/24A%OdX.)49AhX>saMuMk&hboZGL*\*9/J=j-DT1V]F=hm/O1fE(BGM1r7F=p]*mL6)[9CJ>q6%LX)BJ%EW.;V8nV-,pILq>k'B9.-a)S^"58A!=p[MWot])%ecTL-&iG'2:KC([SX-Z;J;\;esuZ*p?+DqDIp"sD0jI7h'%d0lTP9S%`%,J9%_a4/0B[UlX;ta;B'V"M\'[L]<bqNdMG%QGXZ4`L><1p&MRPS9\$TDD+k?oia6'C($eDt&YIWk!;.#r@HAX<-O4AIp*"Qc#%9NH0tZ;*8/j7_3Y\NT1Z@V_%".ijR=eA1jHn^[Vm4=0l'oL.F!C$W"Gj4bKu[Un%DK3)@Bna2^FZnl"dMNqJ:M5U8lB'Y-Q]"Wo?%:1rF+gOmi+qMajDKcO<(Up\;,B2ZNe>IknMqg9;n@CF5(]u4[>lXG!0fbe2#W2a>Df0^VVMLC>+7[+<_9;aH5D.76QFWQ5s+qZi^%XY:u4cBI_#@Jn/K10'B>\b`L>7D?o.Gd5!g9H3S+,=\-!()!nO='MU6b+HuVnoW2GRL=ME`Ut2]$Zh6(8L-b.4uSWqna]R"LCs5`%oZfuhc;"!ba^S,E\R9#Xj:&$Je`RpsQEtiIK04nFM6ZNrK=K/_0=:3]@<)6NW[QEM[[ajjS2&@EG@"FT>&]Mel^A#lYa.mgB-Y'H%fTKbu6!<rYemj)R265fh0nR<SLqZ1j<P:%@Zf@`>8i:\++*3pM+`_"kq,>fE=RV!I/95%;6s<J_F1>ft(uMIqAoAei-nT9XX5PqJ%?E.MCL?n0lIFe8CQ$cf)rC.Y\lcljm(14iiTD;Gb9-R`9,=dG/3/a\//67sZ]%Y#kKC)U'O^i4m.\]"nZ'j0\eY3=?Hc.De(?-96%Efi^q;s/\bk3FL69<;^UNp>g$)?i/;0\$@FO.ip.UhJp@X#mPN'2I_%.%01s[B-HmI0ie$520aa]f#,Hd$=oG4V1\\F,j"spqKS7%5?9BUDQ%@M1OQ=6F9\9TB1P0miY(*t?lQm$'L/J\ZRsH7V'T.[Z5S>9W9ckoSl@/=MiNu86sPiifeqR/O]ej<n.#cM,I'F*h=MaU%`lTcTaDA(Kr3AQ'fQ!4<OY6&#RJf=^%ZuO)QnF6<)^`iTXOtEHob*m<Sjr7F<O8C1M.JF:1OCN#+4JaW?,[7dSZA3+c%&iUE1E'*%b_Is6Z".g)HmYC33A\ChlmZpKPI5V+J,2)qW6KgP'e"^3C)L[&J_k<NR)q8Z\sfXp8=e6V`.FHC>YSBmmODK8Q&.=l:D8r7.cYnr%_#C5XX#j6m@U$b9`&j?[?46I&8h?h:NA'i,.]\r)hCVl%(qGp^mmn*q**5u'5V!#cgoRkk/V?$?X2-Y8n^KZ&7JF/*jH1uir)0/P%$Dbd\:1qZq5,Tn@fAmhkSI:geKOZUeb*6[(UYF;q-1!pBIm1m/n:OR@e_oA0MrU()q_-1kfFrNU*=,`(j$o2HTD^U+l!iG7[>7!)%0?Uh3*??T\Bm/C`M'S-+S?t]fcUmX9jo1Be;3D<m834?1(.r$fhOCFQ2O5BMCmV.?dC?'g'r1"cWr0kVa:$"ma1_^+o4:D6M1\?[%8,I'](35VZ%&iTEE1C4.0_uc_?1E?_'ka<!*aW>,_S>p=O2_MaPUa2MJ&Q3c:ja'nY-WT)38'l,7YXpO5V9<?/PV90,@9sIn<ruC%RP]&$.Ss&k#oIjsAOF#6g4CpJS563lh)M$pZRHk[?J7*oS`C"!&)q=TXl_X\qk>&8qd^_Oeht>U?.gF)2jn;HH%S?3/^17@3EAR*%7W)+"ZBA2'dc3-<`/@a!6cP*N@nh&lkjqXiGaA_KLf"5\7%cF-W-7&Dq1pl)H3BNn*f6^$5/j%3;"bt7Omnm6A;`5=?n/J+0?Y09%2pRjlJl+E.Ld(.1Vk[g8H3Bd!C.TNW[IOij8<Q*B#ILsGeJcQ7NpIBdI*OIAX:MLoDB7B7^A\SB&CPG+kMPW;;%fXWGX]86WSp!2%>h,BW^OsRNq,;]\L8V1EEj5:G39Uh.n29g*XrO>!aZ5tiVS?L<0S%a15+W]GrBOHDf*Atq>^A(D9[4aR:BmZOC1hLMQ4M^0drMRW%p,f%=AI[ZabM32mqq]"bL/ls`o:&CnHTK*_iGZl"O8_\2a3[rkZ;67>mPnK8d,?]#KcZOq_o_,Lr,aXV)>p?b))O4<T\+]LjuB"D%rPs?Ko__Co_<akGiHXBpJ_#`lJ;]mZHG//#Fl*V^kGR.r]ErV]S!j'*)O%RTm9uIVVa'9e!O7#rFu8E*7q\5H>*+C1E83VEV2+M/%j7I0\BT;Xp0Kc\o7aPcIYI$5J[u`G.G/$uT\NN&^2Dd&88[mRX%3^/FfJkiP`uB'ALSsP2PgCGC[]&:r!AX#Mqs@g[i+>M:59R^K%c_aDL_p"diCG:^Ul+;"LM+pt2>2Qph@+amh_:mbbU&-:t^lYjKZ]kPB4(YU#l]b_A^++^(#!W+uUB[E;dY_7+.r5A@eacpNbABOK%dVLf\c$H]#@:R`ERo(sEGG^gXdqcNh#h9m=7\`h!e/Hk,dYLPUW"Cq>L2-Jp"1oD"f:2G&]j@nmX7`80f;!Xo&*g1_f=ebR\O`i*%CXhXW>-1t$C2ki*KsdSNC4=F.\M^9a`>H6bX]K;gC,J:Q?4Er$<E9!t=*:Q=dRos",H3&uUm`Q#S4#pSWOPRu`(Sn(M-FsUDT)4X%(0BNAN_=@+LZ$#<OFS.Z0kA$r1MT>NW!9suM;fq@6L]4Lnfof.,D_r/B%RCT@4eR88Jm4[(kt>T69k*/2fqXm`f5tN*n5dVOC1`o%KL$0J^^n)n%DX-fVJ<'@Wi<!jYS<j!'ds6"N2KqBpas8F2uL6oo;d?"a!Et@6Q_IrnCF3"qMkePT\&\u?HoNs$,g&1(OCY14Q#`m%a>_q@gN4BPh6"4f2fW=dE^Md)Q0Z&Rlafj5JVA3EDW(T5*2(sk+Z"eN*U)lMV/Jt$H09<e#Vr+B+p'/Z%SJme/P'_XEqqA0ebfm.%C(2E4,&bF'e]SP(%g=hZ'%A67.uGha/;btc/W)+e/rD7g08_Ci0T%Ok0o.QuW-a`H)$IN=10l-87`e-Q7d5q(_GS<Maq[K/auW-V%^)W=3(<LugNigpt<@`V-TG!n9i!X'*F<MiV#Y?C?.hl]P:YOciL>^5u4_^%]1eD'4<?eiMPNpXgIB')0r/0_RkuXfjJUT'Ho(C2D%=,DC:f#t=*[2-MB(qqK=%]G,;R0k?7!"'CY0ka>t[&=J!2<.`sJ9H42AI>dr"KdSJql6<CFeZX=[&OW"V[%OJW^-rU(.)_[-$X>.%:so?X[jZ`L6.:8/p]*-8"T=Ct%TM\!JNC$B=_eUu0&Z."8P!/iO%Mfi!Z\0ONuGgB()A*ES]FnT(l^'W@0(<r&mC_BEOGlu#:g'q%M(@l=$EFdjF[/SAOXQkn<(T>o8K&j7/Z]Gt$Y9ZV$Y9`X%:p#\%qQ;`&S3^HOa&WWH$*8/Reil\U$fb?Ac6\$pNU0Qkb[`UAMsZs%NBq3X<,ZH#ppFA>n&#7h<hSLs.!l@p?NoQ32/N=b/^FI(i8OWr?m``'fS^U57MY8[*I-$9`*mbl/0<ZV!1"r7M\Ca-WIbFCH"d7K%>06m+jFNFk@'%0!J_>psHrX1K"JXEhj_+f-=?$gB*OGj:(LeEh2@p9R=Mm0N5a-HQJ>)VN@,a-HR*Q&^BFMnfMCTb!9;!D%@\<f=%(XN??$e'YA%f,N+Yfd>TB+PQ9pBKk21>A4/*sjQWXpD4,7B(f*(kjrDHWCalAJF8Fku!($\k,QXOC4hsUN$)VODdS,h2nEPjZKEp%Yc8u92,Zr1pa3.*83P*Y8j:B]9#!]9J-)AN6m\r=$/[$r\q&LbqTpLE@@]Zc5eTG-5i!"=5lEqW5oh+#.?SmhOK(-/fN;Ea;Knat%7arb1CVcI'O?KQ\rFqAX!AQ1"4X.MVMWBuO@V#ngU9R%A8r6G'a<\'#M/&/nQ,nsi7_NUAZW4*2P*LulM2I.9BuM9qfL@gSkXM;9%bWtYLFC\h-`hJ_e43Np*D(Ssr[^U'm`TFJV't^LuDoijRL,$ENq#pl%mB:AXf`m?<T!H0YeG2*L/8!NO@C!_/)&o)]JP/oG=NiE;%h`=tJD0LD<F(9'*g"*I"rMkOPnltt@e1Zhp,h*rpjceZp'7->eNp%5+/"d]AjHo(*B92*R?aLlQo>Dd^Om42023NtLE=labV$,m*%,[!EI6$_unqSl#A"c#LD`F0];:7[%D`<ZVr+^m]WMJ+jL&h:kfhuL:F-'T)R+%aNlHCLj&,*J%t`?[Dd$!fgU6tDDKd4Lj'4#[g=%LV-Re]j.8![UPQZ7l0>U>%K?'>0L-=WNBchbpGlrToOW1jg8j%=AQ2o@R5D_Xg/Zf4'L(0P`7,];`:Rj;E]&j%XJ;aWss*P2/QV4%EkN(<=LPN87$?htZ#sbP>@_cDjO3@)G\cC*X5rn_1;OQjiK1nX75'sL&Btgq<l2..IYpIM-3Y7r%biH%W)3gu-+f-iq%oG8"\C#G%kOMO5j]aBVk2jn%SEs7]s&eo^Q4:nB.oB[qB*%7'P#NXG#u-;ei%jJRPsA^HPDTJ=>)iXEa,-'J/o77<:;3ZYEp-Lg9C/hQf:WWb%kR'L'We?Ci1N[]A@R!,s$fk2f!B!_cIi@.>D=e\-Z<I>kTZV.S;.8P>6S)t=,NrcaPW`CZ85e,5`of"WPBfBD:[R"\M.drb_f&19%gE7u\7's#u[&SNGhLb%S#c`Z3W_5`as0_N,Mu;1]L0WJDA=JN_E&+^NQu*4CgOe*:elu61gMTQ0i.f0nj)VbOq&e8!I/+gPMiU^`%q$?)NpFI&m:Kcu#Mdc']Lg-6lYB0DnSuTtH3r)_rAEo4O:.FKXI/)m#4\S@d>S#9U"W-r"[6_cg@[DPaNXMd][%K,9T"h$b^OqSs%!:]H_.R,DtI-$SS"FpD=<u0*F[iVBY%tDi_49]fi01Z'1e*"aiJoe^*#c"!,c^,;KaTel'UEWrBE0C"Kg^r6d[)A@p'Lk;<#@>@S%(J_:D$ku/+:.-?'(%dK2+R-G/1Rd7]&/lVJl@fRUU>gJ_9bgXe"@PUEp+qNn<E'SdNRBHjB([FDJ"!6^HMk,INd9[JTJ;LChiQt]%bR@iYn.\"2UaiP9`s/tj_,O\06^L<*^3MEEDdV_WncDAZ!NmcNAL539FW<X)<Q1kZ`uY^.,tp6+mKAY;p+ltJ&]RDXkimPA0WXB,%Ge$R7O(%_p`$Hc#!b"_g_?QeZ9G@bn!]1"F0nHkMLhnqen<r<&O9^r?q`1EGb8;-f#`d&XFV+.D?tZ%G1SB.(UaesO_CYZJ+]c'7%$+&0*AgX5cegH$pegLUBVOC"&#A5j'URA942rH&mqi7`-)3@m:P*GK6jI4O?_B+B8!nt+K@3om*7&ZrB3?YB_gqlGFMfo9\q2*uS%HkCU\"T5A#I:g<mc'2_lm-"#11EMFF8<5)%4;s1dSd(8kd(T[`\7(PVG&t\DOO\>sD/gjem=>?LGj7(c"'c-Ag!:dO4X*o8h(8kB%p$7t8V!.=U43`rm+Ho!Y(Ho!W/=8R*a6A^uR-[fM30%t"IE4fj*a"ESFU`"K",W/o[sI2Qm&l`j<ta,G8:FPOCFV\PGH`ocIPKS#%i:;FH)ROF6J<8EEGXZbq*0A]j:3pD*TOKkuKiodMB#.M>X*e78ZnmH#UBKZcn66+V=R6bJV?XE"J]&Pr><VRcG1SjG2)E/'K!'At%jC".'DrqnYJHg!p%%=V]OGRVSI1%B&GMh\T#IF:[<@BLe+6bfH+;Ligm3cO$3En1i_$%i>AhhS^fmRN#2B(r#ail(+=pQXoeb^)?%cq1Vgk!k"]B\rjl0B)u+OF=0B*mEo,#lIY:EnlUt5B.,0?@d=E=6Ns#)/&]AI_U;sG3$)mp:.2A6<[?BTBC]j-Dd\t3^945B_kI4%Bh\d"Rk2I<a56!\F=.-nLmBd#_#)SgO@RBkO9JR8/-'=8oLgS\k`>nR>4<\UA!35+LQ<;%6r]D'V;`Xb0Zl@1,W3_1%u]A!+gD]8%AT"AS0\lk*0RfP3$<dXAH0U!H+6`eM5>\q.'OfFD5V*G2F!n/X:5B?E-%ns<3eo76JeRe2L]rTE#k;.;J0B<!_=]Mu8ZW3]<oV2?%\Kr"C&2aH7+ELq[$*;oQRefY=$6`1)L9?F,9MQERh;<tndtn5/5T#&<Ktf<pjs#N\&Aeo9dA+\mEU*WJbP"pa]Q"Z>4+I@daQ<s4%5o.,cf/WQHEru3@/(hk5+GO:]0FS_NJKC0bNC2dL!+$WPcU4)L$ip)[9r=CK8M"Wra`rX]#9"a#$WH'mef"/9!AcUQ?oa<OP!B-*%;!Fss0JM<3Zf:DoS:(j,THd5:QnbWb=n<Vq:!?lC(hrD79-TbC75.=DJR&ZqG^r0c!d#&$^dP`>FMRq`b<-,i*t\qo"Ia5,-,:$+%0dZt,n3ef/1ho.'?h"O2&5TmKXlg'qSmi:hCq4RPaishDOocLDe4mhKqCB67!)+#$MdQNUEHasu4R%lDO'sM01b<h0:]k2B7Tuln%'U\lm=L&(7QIQ8s^TZh;S`qm3?,/d:jY4"A8DgdB^aSc]X9(?e7CN>p&i4DB3uWr$#[BM\iX<>*jTl&FDW$u_Xr^S5^.a.qkX!+D%YEVL7nl2Om:b!5u\Zl-%b[WN8@)$7)E,%-L(0!("Pf5<\qJ>n>[?<q.?DM.*RlCV)R?s0BqkI"ZN5UIBYPYrSXJ$9.@SdA6K)gNX%!6-G"JLm/2[)O^/cToh,9+,,_1X+IhPI=?H#S?C6#0&u[LDEMe8:4Pl%oeA=H5m]9TW;MrjB#&)/h?ZdLZN1VBJgV4%K+oYTr/>5%W)K?_J!)ssh5lA3KFloR#*NN:TPojY-l*s/0W\Y+$t-8i5U?IBR=A*m/N!S^k4(3Wmu)ru*kMj]L-ZN1gBe"86lFe\[q,boTLlrQ%3WK_-Rk-kl#R7R)Ke9R)eN4!.%Y_22eB=],6AdL.+Q_dTfL2,.!l.L=Fa^BJ0dsOe/gb!7"`5J;$oMf@[RDos5#9sJ.#&B?&;Ig.%HbeU8emg9aJShoV.furILhm8e/5mj\_Q_^O6+aCRRj#`Q!8&$K$)5e1[[p>6%i4ekDB"/)(FDU&#G?11fFepFM$AP`p1,qr6u\Bn%.pD+M`1S\OjAWc?[b[j:b`i.L@;Bm.?877p0^ND#73(R1pk<j"?uW;C%tFt[@":=de2G,WAsS8[?mlTj=[O5Q!Df#kR@Rtmj;@iU%S3R1A1Zc6EJ*>!033ILFS.3@:G1N??Gi;^W8RN:UA1G_'Poq$sNP0%=T/\08c@Vbn'f489_2N-?&i;RW%Qoheh)9;<Yn>45`!%YA%+r;.<LUN$m.n8JS\+N'&MUZ[VLBDe8XKCMu.gKIdq;Tk"a7hG.CmT[#<`3`QH,bE?9a>'8N)/M,A:`Z0E/<>#\<qL\WA9Rs#[h$O%@r\MP_[m_VJV=jA,K5U]3=94<mepjq@P9P?J-lWnPk<;WHK[bK'1KI58_M7:9uWis#0.up#R&1#!sA\tN;Eoef/Ee6ibdI6J5tZ"%<ZoDtfFtGT4Chj`Kn]b&@`Ais2jd_cT.<PsJAW-3VZIASJWrT+kd$HR0'_'jJ;N_%&8NX!<%KF+`9J!H!*7ouPQlIS)'I:Iom/">%f`9BU`Ce+@kF2JpVM]Tu$#ot_qs<!@p4in^5`#T&!E]mN!5JX,^u]Sb".b*>^!"q1%J2eHQ'7&+J<j*:!_=stA8$@ECSGMC#$RLY%#?pWu8ts2L^lP:j:>K03";0cGh%1!aBDUZY&If4UkmtU_9SF]G&57*g]^df\\C+uEU.JmiBkSGF8cp53d&R<VO0B1i^=X025n%j>%n5du'_`JhpE<YJqSdAfdKt9JP>mQCKR0F-*M2"U?!tCLu_[+hu"jF1Br882eUt^Vp/-Gjle%bsNTa+,I[tFe/G403#/KIXMC"nER%]-hH*1KbF7!2'P-2W-QX.j>GtV50&%,R6rom<X'YLV3p&+NYfmh,qMo14]iB&n+Jl-,'@BO^]uMS;FMV631TXL;I)N`X)po/LlB%%XAD1CkbZN.#UKFB!m`_+-uJ#X*?>_OFCf;k&..P*TkHSl#]?V.,B97)&NJ?=2Qh>L[31/!U)srb7Pk2C[E)q]"!+-o&s"e-Li$^4%?iWcXAh>;I"9\fO#_7ad""4iG-G$!A?jb-qXB_TWLicU6/V@gI26[k`L5['%UJ+uF38c%(XOY_68=@HiU20f<H<K`)Ach&`.[/1$%d(i?B8<C?rBC[7U6C&!e5%\:C`lStsPu0UR,;JWTRiE(<qmpJ]M(o9`O1C5^]dP*S)Y[=C*@^S-.aW%/3[@nL5Z^pIr2(>S&YJ&L%WhA*m^6gN+dR(-F!YH8V"d'\<%iqoF\7s+$..AhKbqKc[mAM5nO6(p\*+7uL>Ke.Q:k7X<%J6JCM3AA+LW6GWOgNYm7K>ol*]6>e%.8Gk.!^Ri6qK"VhrTWWtR4VOX@iuKeoh7Y\#/K9/&o^62c_W`_R?:0^1pIl2a:)<0!$5s`Cs9Tt6Q.GT&88qrX8'C7/:&$8]"7B`%P:<16.t8a6P[?4CU)TGo$jHp@(pj9CSHjs:rf%R+%)D]h0p>SF@%cTIRC?^G@L*IOnH1jg_AJX170;JR:(^8h!h*j9,_\*M4_bgJ%Ea@d\"p9]Z6+VFO"4r?W//V1dW"gS6"IN><?\N*Ba:ZDOap.rW,mMbu/s$Wi,4qhC1]VD+`_ngQ?&o2/Z,Gj^_tCo<"/VT_c);$^%3kd!`mX8ak*^4#DW#e5ib5HG3(+VNJ7UY4YK?3Rc^0Dp^=;/1sj.Nrdm1`Xc&SOLG8/Qb2Y)5V0*04+W7Br)rESMtl^aKs,,R4B)%f%_RIVDM$ZbP[VR+1-0MV5/d(@%K$/j6@mSVs1o\@nDWXR*7f[dIpN=*B9X4oj-I6R"_*j&odQkNA>.I-W.n.,[#?;(S6^-cr1lB%j[YH$hWUZ<0K=KZ`5[P7[#H)_Y^KlG,kWE'JT-)\f]W_?n]64bqT=%>^!Zn>-"m^+oumE@Z2KLp6#^OhBUmKi5;(O!<AZ(Ti"O#\%ekSAC&dV^Kqa[<>$++H8!F."?O\6Z:2Aqc8BR+'`V'njl+:2VeW%,pARUA7R@LN8^7goFKC1MkAGRlo!Y1n]!s&El,E%54H:,8:o%JCNia1#LAE&;!W(7g?t`NOuUfND5p]Yu+*t/;Gub'#g$6C!5amZOT)ZX^e$R"^S.uE.>i2/'JnZP5\T-5^=>@!g%M*9=OAZ!TMJI%G:^S/CJ'Dk/-[(TBNaK5(P">rQ7kbpBjc3eOr>3>n#?t7^'p-XB9X2E9F;J)DBf"qi4q(C\^Hd=RD`@)B35H0UJ0`Z3XuX,63CT\%6>.ikP1L=#90Ob?QL7<i`l)gS1)5,EU-gFICP%Qi?i1mq9l(FJ!W_kOMC4i?YnbJ]'#=Z8VWA/o.0MnD_JoYY':4-\S!_GRF8uqG%"5(+)W_.<T0G_9s$nN$tja%hncXDg[>0drsJY<eB&rmVf/4U):R;R;]MJ"U7<7;rqV8$NGQI(sHeAFVd=;(+;`'-;1A)_/0R&.r.%W8sXEM\8oYYM4@iCZMe&irL;npb,iYgt&u+V=R(crO$D\L[T"dPSa]^2VN5_dZ[D6YJHN4TU0:F\DA?d#o'Km!QD\s=pG$uQA3H!%[%OQ,n7$)^VA"JZda5ku\cO][)EA]R+:(F!6g[hB9Tu_-$(Fl>[oaS@d-URE-o+l7YJEhf:D#bZcub2g7o#de=hVZn22f"4N6i08%/E,YF49;;0X.qEk!4!RXDb@V0KkC5,jWZM`/Q."("otl!B4uXOl&)^d-JY=.'=CQAI=RS]/025N./oENlFQTu,o;@Xc3ZX-&0tEc%FUWj(pn=KdV?R$.'cIP3@4[uN$cLdi[&$1+-k&G#!Z<*g:<>BX!DFpi$otBk+GIbh&pK:GJ1SDm>`?p>*H"_pMLm3a1^Tc,[3mXC%3]+mB$paKLBbFmUdMeQr`f"]a<>&F9=S='n/Hp/hNQBW^5%<hMd9gY^4C'-mZ#oJ%`eEVW[`c$T_`]:TTm^J>*QfF]mi)/IlQ,#6%%D%$/3s*V]GcEers!S4"'TNjcC_.GAVR&cT+.#Ns6&4':JAh#WJRaum1u`4;%]8g&n1r9;8;rG;+rlG"INoRj!rBXhRQ3gR+>RZ5%Q5F<$89lT6l',g^0,##:cs[W..o\K?TL^5E&og!7,_3>QQ?L<\FnPZh-U?@2o'A5a4O\BD.5$IhBm33ZksUFKD:<h-ckmKsBE42$%8L\r6Jk%\dLK*\T$U8-pjES&:/Oc!sk?YG.k*WZ3@oM5O(CZ6:d#OBh.AL(3#$Mr5#ml/9EHe2dec_",`?Scs6/d9c#Gpg%%?*a4%,*QR6<9P%&&I(9+`UH1&'h+c\>PpX&SIs5p.YP=`,GWC9$WirZ,@D/L25Dfi"t;8[Tg$1()u660l#3W4(@!XpdUo4j>!/36d5=sl%-fIV@9V%H\r%&u[XI>*uh.;Mg;h6f`FB`$K6)8VMeMB8m$s$!0-,Zsj_%NntH4ts^U#$[W9Ic)g1R[US0\DX8Mln[L+]+N)4_'3(%U[63OI!@m\L`PU!\DfPtL`]Tj]qh$.C`A;mM)dDJL*3H>PtE5VBUXTP?-B<*["`NgoN9]nE@rKg&cgn#`q+n]=:\fD]Aeu@NhCdT%VA+?aQh>d`@:m(r<5Cr*I"W"H,ZZ[Mk[pD>&YN)14DVP1LXh63LPP@T]!;H-MXiTl583G[QstriP+goUPo['UT`YAmZ)fsVUlgtW%?:WTg^^GiOQ](D7;gQ471C4g,C9"qB`R6t-gMr(QHfC\i,'1;t?ko'([[)Ta!(LFn6A^JW9d%]98HBZId@=@$8@7J/.s^l;?#YG9%Ner#R9`ho2&t.-E*0,q]lKn?M><F>Z#Ar[T?<n'L-=/U8F`dt?^,_i&LLsLs:1dW1Ni2QH!hm7t"oo;b67[3unnC%=X]=E_6;nrJ%(+cgZ*Qn-oR$H8SM6W!#O\U"H4C2[E!H+D`0\["/@WD%m<[Gc1nWj\\VY?NBVON-nj!n4%f]k,%MN=>/&-Cf]f%)6oa?07'aY.1T%fU(S/*JVq9Ajp#@)6B(`,,*lEjgHL8OBM[nFX>n/ni9HVWqlkZ!?tH8FnLS,!m7KUQfA/WF@D9k-3XBm9GAl:(Uq#Q/?cE)7(i,o%*LN=`rlUN*[!ABsOT[a4'o)J&m[;l<!6amS9H.Fa^fTO5puI89L18KQ?65--2iTq(]coWDU4q(d$s:foU-V@]\kqi=l]Nb"A$a4Q%O4*WAYrS20Sgi(o."FHNS;8Fo33KE+>4G5'a.ILeP7;:O.rjX#J="n#N1N5!g.lImit-$MJE;SNiag2>OkqY);%o/g?m/8Ln4[u@%=Ds]\1.<-&0udJ4@+ioibmBmTGX>4&a.D@V7MB6(BB5-]J0DQ`l(`Lc`0BMo_e3?o#u_jC8OK^tglL<a;@_Rq2sl(`m$T+_@2:ZZ%r_u!qkS%_B-._`@,h6QuJ3"hU3/M1bY-%po>DW-0"_,khb8t9m,060;8ct:q$G5A,PmP%l5)Vh@"Nqe(]M0&Pa-[aH=H94MjoRef%f)!)e+[P*R3<mJ*A4IMZ2%Y=2%aS8>#SS]@T5o$"#8urs>l^K7UDteEU=0E*!3TFcSPr*H=[nTfR:Lne/WbRc4tT3?8Qk^9YQn-`%\<pD2A>SV[g&[+5;m,5b.3i;p<Q%t/OX\n&5?UES\^m&lfcUKFY5#S1mhdJ)PfQ*P9o08`cj.ZTBkEB?8a<<tb,iM0+>eMQ/_rf:%>X:d<AD3Ou7A_,$G2(4]80KMU3C?\fktqop+OHAeX[sp<R.C$6)fnUf5a6&T*>Rml/KMBG-Sf<ZPfNN7:W]9PEX12U"Q`jCF=>>j%!O0Ki#>/L>gS#=Z&Q=f,!*(G8T.*A7<;*,M0_P\NUb`mn3H`EY84d)6:kja-%$Vu.;LcI_6;^*Aag%[C(Pf\U$m9Pc_\S,JmL&;9%&njOuJIn0;e+AKOKo'H.7eX^'BbZESLm8iX;Cs.\ZSo&50ZupC!^iY3/,17>*)d<RPm1V9LtPZe1rGVO%YE0S75@+@$!iSJY>Dad%,,]H1'ka0pVd/KI!=oaa]hX1H^';b81_^'V-)2[@^!TO3GQi!f<t\/=jq,AC*)r[/d_5p@`_$G__lF!Rk"NIK^%&g*APUb@@ncrV%jct.`,=NE&`rY:fXZ5sZl.dDC];ZDQnGnpsgic+^0buS>E9LNMG[,=F2:2:h;e2*`[KH`Z.qb0c0^CBh)@q,baeU@LHANd+.M6;X%1+##e:<GP*&4<cq"@0X6JHuC`&e;k5qWcOr<5UK0C(Gtt1edd(0Q^#^$1r3;5,U_+fdRL[WZ3hAeY@l)'i24tEQnIn3@UWTSAA7:%EjK5V:LTBARMuu9G_G!?^t*&mehJ]n)T>8f=`"NI]GF0u`T2CM!;0W0*Zf0<`MD_0$0@a)C?R^PZ6Y?ZY^gcc*lg?U,$_Z/6Vah*%do\LrrN(>o>"])C[>E?/C_#@@B.Tc)kG=1<<U:!hD^tuI)9Aq4F;Lh`&GXDSeob>P4[.Ij1>msgc@ABkI6Jt%N%knXJ@,X%l,:km%E^kNs8EXj^Xbmb\+?2-#7AA6!M\e3o5Y;ZhoF@L"=s[%%C[Po0NB.AU1-S*dM5*'(a'uJm,#m:UeTaYtMd`OL>GL'6bel=:"#d,B%8TlYPb'k&%Rt9?^)gS\PSj<+OBVHA'jIF3#hc;,;EmJZ?Nc+^%d`G6'!&NJh$c;01]4&Y/fE/-C3-*3@m)i`gKK!eQXcBQ3,s_cQ%*lqA&4nhB_\Fl+/RrSq.!i-d8P>LGd5&Q*g`8i`Zf(Jg"TWh;YC7^hg%Z4Y&d#"!CP,\;0Aqe)(3Gh1W;-?IND@8_@Knq+?`/]_T%6CBh67HNhhZ+pe?q5uOW8r:FHE)TDm,9'pF`#ZXG=9m`n9;@)8fVm!u*nS65AJf!*FZOOh$j&"<?7=u4]U1YWmdQNV+:IGtP6[\?%6*%`SS['9h??J5J6.VF0?(N^K.$C:Mj5CJfX>Is;fsZU%0Qcut=Ubi7Qigr2b`UNug5HfXM+sq(gXZk8$+)Pd,b?ArR;ap_T5#Jb%,*</aSA\lTW&^0sFZNU^#pY'n%M7hh%tWE=#\^1/!(nf0kK$@U[%6@#-DJE4%QoEf'a4ZY6EX&nE*TQ%+:6^B'].p4M(E?'jsHD^%\6=786uH'nI[RkZ!.2A@Lm.'_hMnA'$U?/`]+?4W*O/.efbctn'^IW?]l*o!D/'L/V^`q*o:Eo/&+rPEf9-'<AOu!'&mkcmX*Xir%aT8i/Ubmd57lVRTUb=e71c'Z26:/nY-4bW>N^W<37%6Cj*aG"2%'UAd"":]?*Hu;,`<W(2Q:s@'TNiI@1<0L,ZC?d4ZJTdFh@7it%`M&*?'a<!</9#RPD'R[k(56p@Np/E-]F7O\V.12b3=m3N%]p<sLSl@gBuqR'niQ"("pi_j(jO-T8OU;!'D/!gd4see$j8BFML=_g%m/^6oN>P6h*l3[]81:Bm"$,_'5WQ=oE3c5r=/sm*\TF!QhNW5Ke8mG9`$>'RY/cq$;=:X'p5%G@\mgCan,m*Mlk1Nsdj/uY%`]#(%I\NCb4*29i^8ZrW=W^N7@@bC-B*TY$]X9=L@'1"a:h?Bfah8.02qQM)4W_D&gJ>e1gu5k7PUKJKpFG8e2?p5K[bN.:'Hb)n?+8@n%-DOF6oY"_=CrR'e^?Mh>O%0\AG@dH1#m'lLe*O4co'T7^"phcX8p'=Pn7&q>&03c&&HQGP''i"g]E='N-?*5#;(7g[^kcf;7WgNA%lZh*2@JZo=[Z(s20.]a3pujX;ooi"(=@3.e6'='&e?E;C)r]dQr!M<gSci(4jR@$"!7Rk2/]Hn"2^;013g?dc!DZ$DW<1E?9C(t1%3ftVql70=n$C_5n=7")?69GjTDq0hV9=Ce+?J!Lj8-8;qEf24F*FU.WZkt4cqSjL+aT.nW2N$p4dm-P;q3Fup)&fX'&C@gp`62d#%nDOn7#T'BC%-2JAfM_0Sn5Cn_nbBaq92Ep]7n/RnqLJ^10DAEX:^HPbUoUQn)T\1N'2!9EfN?VD+Q2;:Mr:FQ'*]sWQBiT3a&(*E%AMDHrnA3$[CfMl3kT'eOoMAgX*/3gt#B6I`)1"OVA]p%#IKB[:*[_RIat4D0<jG.`<:ITOTeFqFCo^YU6]WI6-7k%^b_D-,'?'#S%kPt]^Yu.ZQ6I=4LQ,lGEos9s3'0pW%T(h<>BD>"AH<-/peIS0@5:7oB3sFX1&Na7e;<E&o:hTg5<J/Umc6,)g-.DV4_ihZ7K!\Y;%N\ZAT>pG*Y7HPqmKH;D;_1C+urN$,BS%Cg`B^3:93A7PZFt4&1:1a_e-/@ih(BQra?5NfG=^5iLG>/g0%],O3%m?>/#(<2gZ&Z(f%b^(Vo8@E":&rnt!TsqQL-tN[CM^7\X+*X>)U^\2%`'f=$1C]@,F0Ith^+nu3AZmcL$5)Y>H(b3Yan0'6bTY<fN(&(SOZEE6$ud,;%\j9&'ATBh#:s89-OOOAj!TncJXF($uF*]LO09<T>A?S;m0k9gn(Q\$8bJc_C"-4'BZ@e4LE$euEPnRSH!"*X(GNF4.m-k2@A>A!>%Q-<UD1Tf[T!Cr#%+-fL[GfC-rJsq+0KhD5T!et5UK68l)5UV_c@RlINA34ndSd1PfbfLTG#c4mcB:pOCcgL])pdX%b5$hCol$btP%pE3+QVSRgD(/4T_EpI+@:A[qo?pB.&I=A+uU<Fjr>cu\MaTDdl(,=_$aU]aQVp`eA'U3n:<H`^?NuQ4A'M[jic)n([Z^6GuIbn9K%R9T%u%aWH(S<uf=i*?cg!flB9(;B<Qo7J1E5Oh,?Rf1O],Q?Q_;1YmfQO]WNBQ\YU9PMh#/Di&H4b'j=_k<4Qa%#fJg`?%A_fs9V%gahjmF4TZpV)s4YY^82EVk]aCgSMUKE7garEI?L-FbXTPYC#BEL])49%H#1oc;VBalT3>:c19^erU)Cj%q48mS*?f"[<iR)H^]-8%S;rrF`^_1]A&(O%hqhn4rpFsLVhI^jXZng7eVC?/^%9_HCUY]th%$es5n19ujJ3JsRXYYtb<Hq?a1K31]Xn/)#"O0=a5bl]ddI0N%[D<3QB4RQp.>+MX;.0O(qV3\gdAE;QnRQl$l)"@=Zm^:2CI,\U4;U7_;0mu]B[SDKr2'3:Vo^G]:k*NZpitTn.kNBfG*c!"=FY9L%mZ*?033/"P&[d)AmB&\4<1cs);Ba7;9&3?kPdZ>2T+fSniWaS'<tPhIJ.Qo2+o./MZCL/XgRKh8H-%OPYdN]g=6Q=uL1&b3/o6;q%am_9<0PmARG)qQF[0BVI5h%:]1.hc6l**;l$k(OJFgs--W=R;"#G^^sLsl2?#Z1#rEpgV1H;_Jdc1X&XVG!6BWGT)16c_1?gLbg4%/sf=fD$]`[57G,uD8*L<q-IJK\]sk,0Ae9bcJ5:DgN7A'mVUFdD7[2WC8A"?]!hl<QR:OhV15>T_p`dAnFm[Mik+5VQ*bHM9%H]6%/l+CDY*1=J=2f/#od21oi>#+@7cR5grN"[BK\"3YlqS?4'0Kr(7\ak5?fM=&/?s<U[HSC7LRj>WLrBZLD@S`E;$^CH!c5G*)k<FW%dW+YQfX)#aqo;+`,uXN=,[NWmo^Tl[nXqfXhYm>9;mM"hk$>08=]Dm0j:mX"e)SK4(&DnF,(d\""O]O![>4E@Il)';Mj$'VnWOVh%pr(6e1-B7mVh`=[FX2"-dfo)TY.KA3J'J;toKAKolZeh<'1gL.?Vr0K?X^,8haJf[_&B+cGi%eiZRd1]F8f6MOFoj.5Mk!\ZAYYO%VMA>TpU*B&7.JWNeIXWe:LVMP@FO8L.iJS.2b>pP(_h-%Dc`/BXJN_0Ri>bM/T/_f?A'UT^*5'u[L$q4H:@bkK_V$TN&TWs?HEZO%??^eDm]O^@/t^I+&%glNZZKH"V>dg8oCCtbl^*I[<kf#Ga@GLa9o>IR6p]22VW0//`P72Dp;kVX##JCkaH1`PNssPDK3iD^VZ0_B%04o:O$O)6NB>_oaCFIO&5*=$<T86]#I(/pUh<@[lZUC6h:muR(%XSp;jO.ROCK^Re.ru;W^XMSXMk;<*N%*na_=7AEcl9WCGDT4]%.qmM:N%qqbp[8j3a(T84[`7Z^@e)$jAG+*tYen"/Qc=i`GLOhu<pYE[rR.7H]rLhnY9@)=Y4fi0b0-OQKdkaJi2,olg?hfQjpA]a%V^N7F_X1895.Om$EQl?6]_0RH?dOAr2([V(T1HLZT!bee>oM$mR%d=LXOY0,6M8fN^Rt30dp@@5:1[hIj!Q5F8`BW[pEajoj+[<&%7X&t2CEKHeBn-&ZI=@$Cd9.EC._M$j)6tKb/?eX"7sF6.;6&kZn^pX+DmG)PFRN5>6?d.Vf6Rtq]EI>h3o9`18Bf+cZ$0ub_ku`j%i<9,-kX]->2Eeo-I[g#.H18tRB]$p8VpeDP^"tdtL3aXJD6/O$X@`kLoi(Af$b---<PQECFB0D#[l;>S(Qj:`f#!X0i2jG];<,nQ%a,UDD,P8eU&CU"Fh0rF-b.nmSgV^Fh(UsG:[q?F6jV`2QqB(NFJi(dF\q""TqJ!S2*@&VlhXR@,V`8s)LJL[u0VpV?nFC]_h/W1m%2-/"E\:@kGIW;rZO!eS(eRqs"b,d33P`iENh6Zg/4W=%"5)8Q$]KH\0@@>sAPrfCQS>+2)rR`0GfoU7C)PXY(C4G=T_\B"^isRo%%2[d'l@Iab+g[C6Z*f!n&4GDhAbAeM6%@aisa'l-4DnU23@>\!jl+V:e*+jO;AlG5IJ)E;Fqd2>nZ\F1hFROA6Nl)R/kctnU0'@5A%2:c3bFl^[cLFH!GVFPm#FrY+hpO=gABq@0bFC!pH6#1]_T,P5ZWO_CGr+iA&mlaD+&hLo7LVO'fIeb)>=FKtU5u/SJ]j@8n,DFd>%_M7&]^J".IU+?&`m-Sk7[ME]hM\c;Y/QuTB[h`grdC'g-__#&5#_6cJ[P_`fDU;8qe?(mgg9W!sC`B$amFg'^D=-$<[qGE3cKk/s%XKS!o.nokjBFf$^2FZ+BqCemD@H+b2ZW3KImQYFST\"YeHG04;2Y#!]i08l27gaP;Sucq3d-C/C8_\\-;R(T5cN^FfNScqc"VJ;D%B>(go$/5<4]j0+.MR[6lT')?o!8a8%r7lqNnG=83-ssA,gYI<+4mD[P`OATsl$:u(2qAO9X2cTcYFqN"ljnmiS`:r(MUK"_5g8p&%0cTh:Qq`F2Y2EA7*j+sDj-Sl'r]2lQqH<c6_.(m<_:gt*Rspk&>3`HQk3[D4G!6a/!;h#H_JidE1Ui89Q[?WO/h;.&$prnSgY3It%2qCl7e'5Qnltp`Pp@]\H=n*506*a4@]?r.7iW,<>LjoGY]N5NTkq;RUgrs>MSQG4cM!\VpI!V*=MoT]7=W_s8[Q*,:@^e8rY(ON5%48EB&-a37a`_A!WCq#TEOh':Cc=bCF4*eH/]\Q?.[A17*loFgkZDlS1jR!`R-R<d1*@';jj>kAk>KEG8r3b43U?r`eFpiT-KtQ5W%m;u-!-H3aEjKb/)29FQoCJafrFJHtI"9P@9ocE]heS0)Ka]P"_UM[$Wk)uV'[6EeA;VNk-?uu913Jm4Q?>o=W;*''[2lC/qIchOi%oimg-fl#Q=gU?>>&[h6\I:;SE/\83X\bB^'VYtiQJYi+PrD*+3i8.hs5qa89)lB0QK42ClVQd(;X)XV+NEaFNCeJg'P2*Jk[k5_h%\oH\7QhLH%cR.Ze?d<;fLU@*BJef-!.IFqnCR':K*Z%lGBlkdsfgg[E;(#fkS2'DHVfR\_r[O2(7d'"jR(VAm4Q0ZFCJKQiCM3V;%*A8OJ]$_n(imd4hB`<&_;8R[]@FjrM6FIV?cY_KM>IW;:D74SV&$0)FQ%nT_\qi`8Rr-tn>IW;:D74SVD;Af.\%1RBS";6G>`#ck%gEP.^?\CJiaknDG6=%];J`!4B[B6ZMT:teYfS8cL1s-X/%#s8"D"oeCMEcDr_k3W"Hposk)&hf^8_nWhGpU5SUt6V/[(EC(pm9<>%DP*K)opm&^E]2]sDP'/$Btj2Po!;'bTBj(WbMkRlc^jq$qTd9j]t_"_DP&qs%K[G'q3?3eeDY,R1\ghSI"0Q;WD)'E$XB)JT^_R1%[Wge^EYU)%`L<>4-HJ@Tp<NmJ=`Hdb'dr(uL0K1&[q:8VP>OA1Po-Bh[I!O4gU7Jfs2ROlIj4u=s&HaiRD>]$b,<ol\-*2F:!GRK%2041YVl3.XVQ8$r=^ii)5CJAj'rU<bDJ+shGe3PqV^P320E2]Tn$k[BeL;Qm?:825%OK(]gP^l([mc9n;.Cn(Q_gVmDMoDP)[aVe%V5R7]ODRkT&u<:sU;l?,h/-#!'.s$gW3IphChcfLe)bRrNO(2URk/IkZU3Pt0l.qmgV"[5h;W(p\T:'^a@r4nY2b$#+O?s_Ui>/T%Z=KBB.GFE`@uES,WBWCi%#Xc1)GdB;]6nYAqLc\*GC7&t^2"MfYk?I_D[ccGqL&-Lh3GiQFZO8udag,NF-?6XMs$ll]e5LM\9\ZI%\k:9Q>!m=+L4chl91+[lJ=OL6DDE7IO#mO^5fsgjC=AGsG0q34If&?'V;uJ8?1dSRA(sKirL7r!o]]n22!KSb?bSS\'moYs)Tgrm%-goaPP5Le!Hhg=:Y&acmO0(^sV)^c+3JZ3:DN):4Ab"dGZe6_IMUSgn5Bck3.E6OYG%EQ\OK,?^gb4&dB3Pt?-h*i\im-\O`4,!f%Ptq))0nJ)4Dk$65'>A>#pF-ci_@CRTn8/RSgP#%d-[]"g>hW1Oq$K?_@[lq*?HQ>on[9=m2WNP(I+sTuS+3VC*<fLuj'./599\oE%4;`1s%,8boH"5=:476*?psu-LS+9kaPj_4nJ](Q99#Op-]l3Zd4GD7Vm1V-:\O"k3`cE"@gF$<TTMtj^:V=1K$NDtVI6km>_k5iV%WCto-81s[AZ0rb,g;e.#Po2D<D]a2Dn*[>UKH#p.onqA2FmDhQL3oJ0!5C)=ZkcN*7@@=-LmLZ!53.8QRpHq;:VaEqon)SILn6)"%s&Z>>[[_b3jm5^HG?66O?Lo+308giQpPW98g]eHVn2-RB:YNkRiGj48LifZGVr,*g:\`M9D5tqEP,@?K53S'Im8[LPBGVY#qgEJt%s#s`K!<bR@*eWd&$A;CpQ*]:!;ZY_I$S-/ms12j,27DX@qbOriZliH4JPfk7#=bOQpg^F8Zdn*Q@]W%cN5NBdb.`[1"+UIkWdV"k%gM$%BU:p<rNo%qlnJ-5T_Lo7Em<lrk*-a3am?<fKrc:9eVsgmD=iYBl[#LD9;7s7FQaYjN;&g(RTt5pIdZlp:r>pO=2AWs0=E%J"%h__*)fO_^$Z0Q9Z"ZH>OpZ</:Ups!CHP%$qE5(sf78'*]GGA5M`H.bi6Mq36ADKD,NH^gmo'C>!4$I>%=65s=cY'\Ah=9`4]#L(q%CjkKD)7U.MS]+m[LAT9U/$e-JZhTDo\F4gKr+sj\kIRg.lT2MXF2M;Hjf(Uc^SPo`A"eD.,[Q)1q"G?07"TAX+%:8T^Q\W\g5cQS%/<55W9llZq+\US1l>EnQ5AS/5KqHG*)%=,]G4[<RPCXDoR6DA;2/.LGN;oceZNnj"[/+%X8+:+,QK[uG_agGOQc3E=_8,:bhl+#4%`5h#?d[_o[N/p&SA%YNcaN#YW7"&O5*e4%@OY=ce>e7sc]`6DrrjKu'!SjR<&Q\%6WLdG4a&m8@nnjh0GTUY39H$n*[`6Lb6>l=3%VV_U4T3RqiUc3UKOq(^Pi?jd[2J&H"mA&ZVHl39[?FfRn#LWNe]o(oNT8S%1f;*ooj:YUZ.jnnnW9fcK)fkX[.q]YHBC:8gSCK7W%L^>@hGh;W;@Cn`b.I\o%Rj7CjGq6e0QU9OV<kAe1-SO(!M*SQCOT0PgKMKfmHbF:!o78C$4fc+'!Z*]h>$q<:;gmjjYFGKNq&1Xa%"UKDP_k;JZ6dT=8mP)/:^?P@Y$`+rjob_f8nD2dFTNBj$eK+R9ZfI@OnFQSHdY(q%q/ONU`0'@2WpE[dcW>QhLMG\3ZD0>(hn^Dl%_1t5ToQOH'+-g3IEloCBkt1,7lia=$.GlYr^5o$88bm0@m(oSFM9Gc%p;2]fg^m\:'btCqelXpIf8GhqYcfO:Ote/i&dP[F!nN1O%%V!4$V4H3\oA_:MhKce]a/M&jcW[PVXa5@W3I<LuRtBJACKRUgV4U@OH1tqHq9N!3E^plWK!k+Z5ki]8rs>dRBKW(VT5&)oH0pjj%C4efjWb&MtZ1*B;\&6q2o@fZU%\M*(*+o?cL4WDP="FsP,?-C)3Ts2qr@r^:&4fi7E0QZ(_o_,Lr2AFi^Ia4Ba28BXr:4W7^0#=J%HJLM",jL[kJbm'#:d,t&b,nus]Vh5#:ET=^el-7+Z[A[XRl.@@[YMnUG&Qh]\\a^8BiB8*A9o&b%<Q0+ho$1E!PD6c')Je=T*e5\%@hss=Xd`FTg+33Q7k<*:D4l/Wm?QdeAmheNDt'cOf`AaH8j^Br!8U"idf68QpO.P\GG"j7jk6d0WODd.TLl9n'^Mr%Y3o-i2!K5.%\)nibh0tb2[']WtXS6h#gNf>"a6horlZOa3;lr4J*o#-P#B/(f>s.u=HT]epDbikG^kfi%8U<K!:$UY*DPm5,/o%nq7An(QVd(_?%>/Q.hJm#o;Q1kdB_f6/<[9hSU/>mqGim`GrDf6rY)8]PN"o']9]ftY(-Je1n[-`kqA'o9Vhk*]a,Q'AjRt%:5`uTV`'or.,X)8-P%H>ELoWE@FB[AYM@2?-7/-\qh0d,,<oD]$[#lYhdCei7Q,itCC.H&eeAg^7XSNk\&<KC-)oo88r0[5F@VPIWQ=b>"j?pT:FmDjng9%qIZ[#0U,Ykk%tRJ7kkugn7i@:k@G60GD`V1]Z-9fmHuu*24(G<6)s$nGH1Pse*a`T;K0:+)j^5iUi#&4?g3YqSX`:d#RnHe;sth_%ld"8@TtR:A4;q+M48)4CKAlh^MIH[Q5QpDlTb"nIjguAUia3eCmEop7O:!Kf(***B*&9pCH@8ua^l]D'p@.J#:6p'1!jk,TNF,hc%o!!IahD;$L<[jW)jDO,K$SRsL(QBKu@Ne,3dq6@Y<DQ\^?k:u)F?E;)M1[#k).1!/m2_$b\/*C\V-.Kri7Oc8pLee3Ig1!,=Mq=t%eNfJb"(;)TMsnhbdZ/$X_dB4Q*puk@-$SM"K415Bbn\:1;Ld;a$guMu)K*:2o_*u/m5Ja/gu`Ae2o*TOe0dSpr\Zq^II0'jq8LsB%;uRh%$F\G6%eNk144#UrAcV],l`=*F/Z2dk1tZoN^^s%2!c3Ipg26aqDF+=t:KVUMG6)^D<f"IU?5e))6bi=7h.1978mo+7o%QQ2%NM7Q)&Ro"=oam_7bYutgGY/tK28:V)2bo0(__Q^VDZ+?sqT.eh9[c=kDq`0jbc^;e;43a-0uHjEjR4'C<\#AJ<\%tI$3cHX'Bsmt%"MFLjYhEMY0Andi*K-DB/\N8Of<p^`UiLe+X>YWngW!k<pOd9Fr+n2SYh+L^[&>\GJn`UXEkNo%5[(iMTaQNWAOI%Vp9:C!>:R<m%(!T-]X)M#QaP9'.VXtO*>RZPuKoXEq5T5B9"ZJmj6>DIdX!r.UDJZ#I9N/i+NC%0^e=[@IERYd=@LHQ#TFaoX/$lQgfR*r,;/+p*%*9m.=)Fg-\"dWba[)_f#j&fhGLq%0d#bpJ;rGFi:&&IJ<4'aP*pim6&lu"h1!_;Ve84'FZb%\'"&g't4`F5CSAV_32%m/Zt0oFhV%.!ij/>W(kqHQ6)D#?j=hF4),,UU&aH^H".a^Kt*]^+,a.m)j);VR28EAX!o?.>/+(N"cB<ob\Mb+iK[1"!aR_#YZ'PAthVA)pnto%3K0h'ef;[la4;6%Z1$6`RF)PNmOZQe2&!5c@'\'qnNOl<Fpr!Rf"&kX>(66\)B@o>R3ORF#:oT/i^kutNPY/G%"tM**k1[PM#9t;%7AeD#_;EpC[/#Uf:NXu5'L("=mgnq#`a<]W.QcpYGPGq9p$NXpdHeR$_pQ.$8$'p+/80t2d>F]$#*[Ha?^I!=rBYq\\Mp!4]ts6n%Zr;W6ddm+NdWO(,G5tLL!,WhuL["R=,%<EXG3b3rr#a":AVUe??5K?NMoWkq#l_tH]hF<4pTMH6N_M0/U63+Ka_3dr]3%`"n&aPE%;&bE;kjq'YMMgH/XqujD+#EI:;7R$;3]d(`K>$dYX21ad4hg9k3(te//'kd<]SP(d[(mIZ&e`X`@Vr@8-]fn`nLD-LmWReU1foj:%)dY'qTjMf&,ZmLbW[AVRr"i(dlbo(,cZVnr;=gpr2=E/f)VGj/7)mV^$j"1nH89q3m(T1JI9'6'he*%]5?U.`_5W0YQl#2h_+.cf%$>8V5h18tt6h*]2&<G-u])#5k\u`oXGH85b\Q8-Y#/0^i/K`pe>8P&5Po,hS*EF7/j[\S![/?^_)Q1L@s3^74q+1o6-eVc`@1`3b%\^_uT[tj"=6$q65e(6FC?'mmu=FeNJ4s[4^agh7\31-4W;r="[j7-Z-%Ln_6i`TBBnS[^bp(/<E%HDUnj\bdPdXi=NU$XCG)gKM`%(Us&gl;fgNL0]YQ:_NPgURIM:'R((BkpRSOQ'S&>s,>.G:3YJWlLqgLG@i;bjs7EP8m;k^:<q&[mJ`SHqb:6X(nAcqm(Rk3G.Nkn%Ms7G-Df!W:%I^V@Vu:_Y.#lDQi]_/!IH*-/gRZWKbac(2DeB=rSI]=D]\VmgP8T3:FO%K5btHa:+7NStBhS,-\N1T=N,6b^C/R66%T*,(fmb+CKh-]:s>S]+9;tHY@3,82ZV!!ruaRl&3'rOb'@G:Ue4U+s(%-d7i@mjDiS:PCb5<*QTOL]O=]>7Fi?Z9&[Ub)02,2jaF%3,,.TPkWYAdb_Xn3oq$]TV/X)DEf_66,_nscu+-al^e2o0Xprb,k_\o4^-]0`ZENISJ@.17G%ipV8IAUk)'^\8iG4.8;hoZYOm&J%8d(($VIt01a7cS:$o@3+HbNnqV52lgA/LQCIA0j$q7T1Q/FDuM+HB)O`b#4YXWq?AR^#Y)`nI4e;\nl9B2!BkVKp>LF)/*pddD=d%)ji@h;^RqpiAM2&dRKeKnB?'E2H%eP_^-"uAf$M)OC-f<Z'MFX>HVdKEO3O+io]QIMgMR<f4s7h[.gkNEUT\fY&nu&K2-%"k1]_f%33!s@a(K6gS>chd=s*KnQ/b.PcVC1Q*A)2D']=dBQn3,:lr40VA6O?!o[*(1KLAR?ATiI0($V/M(@ulj<ktrk5-LIlD"lOjgs4fI%]re)Pl`^"`]CT?KXom8e:V+6HGTU%n0qNR;\DUD1%bfF>PFeG'>FFkFeBbtUGP`b?(!VKanY-amao<BhLSH0>V1udkZnj[%WUq;B%.bo823%s'1Qk_.Z[-!lPLM%!aT='Gm8(1QVBPan*d+6(F5\h>)]JX,5E'?B%oTq#pq5AnZ$EV'Wq%A`<?sqBCp7\Hsg#cK;F']a0%)Af]LGqInf0gj;_>G8$@@nAbB*>X\qljQD5g?[m@S=3%90H)O7q=q$8Oi[(G]4JE(CH*0'VShN]2jt_G1qeA;Re3Id[Cd8F?1]:5%S+P/gD*0qp6;%)ag94c0VWX[)[E"SXjG5N]dV6=W%^"A9\(.ji7<u<`<dZBM>9jrsmeKcN)Oqm&Z%UV7["NO9d$^u!0[4^cdeJOU%H8=_,(\/Ko]%ugJMNe9>F04(:/X>WQT%L.Ug1,q'>)safWVT3^fA24;O3=[BWp#Ief5hr)lcnOYOn9/>pZLX6#pBHHVQmAS3l/FE%lp7hA;TL[0"O;uk)Y_TSieS;ML^pRq.X';.ZaD:2kIcEem.C`2F^?Vj^b39IVM?,RC=;p^dQI\VDgAKc/WJKlU1egFbA"pj^*]>X%1G11*p;47f&+m==/8o\mdk!H-mA-NFS,S</"WML;Wf*K")d4GuZsA$sZ1\g*$'_Mh6>WEN6SD&p*s*YXZHt7*hP+'ENm98U(W;9'%o$P'i@gHB`k6Yq1rMQaIU1Ki%65M4_3YeX=)ZsnE'tlppJW*rR8MO#/b)dAa!5garP6>Qo'*L8OdpXbQ(:K10ZJC[sK,^BUNo)EC%f@8rm5?c')BJ])M9\jo$4?o!u0:&u=(j]1g0GJ#;cVu<t8lCptjfC5FDK4*-R,pQ'M\NKE1SphVdRnDR^ff/:S*<(VG*LY,g[7(t%bl,#ogbmb!Hq4oi@>3q`6;0?YV#u%2e'aQG1Y^qHDfrc5*'JuIcrqBHO%fQ^)cok.)o!+@cK/Y+M!mX)opX4h[YBF@l>Z[q@/0Gp%Ln)V[P^5J2oEWF7d#"@CW&(+8]D^#a"[h"K.t+=#ST52+F>2p$NF(bE3\i(*C^g=2o5U81,$C"C+:<#-/AmkL;6ZqQ+!5G1L2iB9%\QXkNE[sNT+Zf8\dGV2S6&kNTY6;'hXNSg\F+hCl5:[_j2"c)T-^BN0G(9tVPHO,i!pg<HYmZ@i`k#UlVUt$?s0t"U's[FR@Ge4h%//QN84n-)fR[Y\Olc@'3Pk0L3(1.Ga_of*9osjn;MPSgc`ApXtbqIc&X+Ei)C6/,Dn'^0AiEW_KnE&d><Hg0Qf?\PMghbT!$hkM@%Q:osh5-r,7qsn/+Zt2plr@NNS[*`93Jce4.l079qW8I%:,Vjdo$A=Yu_mDNi:!5S(0*?'9J&/)]pM&>7O4o(,!ptHi7MI/Ag`@W+%n!&QPbT;&+r6pIVK_O`Ih@1gnF7>9&0T.C62&I4/k2G1Th<3UnM/JYg1=NWAO^!)n^`e`eEgLsOg>uZ<*U^tWcd0G_YfRn[N_^8#%L]%Eg;qWie>9DpD!n[rWZK\urntc:$DoAal;[OB<Gh>/dWP'k0&pZ$gDIs%=WHBUsFXJq<2,hWjJn9ZM72!B-qp=1b?>.mjOn3WE%A6u@F2%6TCg[-W$LPM'<<:N8(qudgQEQKmZ&aOPp]Rp61c(>KXB90:f]\7?GNnaM-HW[A*+eA72bjU!_R_5cXKO2o"g[m()<t^*O%$`f7CeV9/Wfi)2b;@gVTg=n5tKZ%S*LJ+Z+q)1&#lgGWN(#T33jbMO7dXqFt=ipNnWW]C3)Y1sPL(]</-,$@dH(Ace;Uo[bD,Da0%ZFoI2N#./]5Gq#t]'8+Qp!+0o4'#UGbgXCkqNQpK:5C1nWDtr,'!#.&Vo_-&hEL,o86lP3+Rt+;*!k&R4"cask+N4Lcl7rf\"/>-%ONdE,s(rYB!R+8QPM(9"H+P_6/,/1=cCXDWICgUs`4$=f>sPQXLbUdjWMpri+$PX97Z'6_UYbhoBY7@>+92>"e+r"mJ+Vn_ag[oB%O^7HlYoeb9KP/&IFm&MM+Ssc83``_.?`3SUn=+V$61<JK8%%4rrE-2Y*jffBJ$*..^@uL;QgXsoDo;JFf$jN]q>^0.?]C`QGA#41%^E:sDh*2qW_6s-aa6K]Ims;J25<IS?S=?.kNpF=pek[@bHEI&=\#2Hu^1sZ4q!-_<rR#TJNS<!%rNc=V[9F1@r8u^Na/P;HY2)+N%s6SI1pl9F_p?<YpYMH1k:sRqL06YSk5H9jWr<,@8gb5_C<qFBYJk"?uh.V$l^:E*fBi<Zam#C!0hYkd7r=&`;HGHs*%3)X#UM%JO%Hh$jUSiYr#X^U5p44!m*rOBHIh;#_5pt&<Ye)@A(QiF,]qsag@jh\>XeArRlU1n=>20a/o?Sq"c_cO$;%i7q9p$]_h?_0>8PJSk-%m;Lr:#;g;CUu-XP450QXJ'tO']c;Iom);9iUd'<Vj.![RQf"'Onn>^ZmoY"G@++!*bKoXX8,8@K(XJY<oAua88RWC'p3NbQINCY_%q*X#7:@%/jN<PN#TC!U<<i_-*rS;bgfe5S+/:"U/IrOS#2]a#?T'*9AYCEoH4mBeB)`)9ph]);N1ar^k;3N?G=nJ`.(r#RTqZ/(X%3PVSZQg3m,oij,L)U+&dDdTmf:)`aG?QYL"gXDT_gV_p_fQjo5daiEj^Cg=QPE)ZHr0^-aKcs;kK9n4qq3-8MI<TcXqI5gNl#?4*%]5r&frl\AgPMZ0$hNJ^gANm6TB:o,_q'F1U<5!P@[(cS*+ICOBXg;P.rQt<oS$]P4Mpe9qh82auGk<tDY\;J7H19j,^Z;`qLS(-c%cHb1XB880XF?W(Xkf/8,_Vc5SG%W-2rd9(fKI:X9qR/7=kqCpRq[X>^-iK2T"^3H\^O>ulUh]X(hPAHrfh&bodeH]2\"cBUrW\P`%\G,bPS(=2'q]!:t?`=Hg\W\'untUo&mQXP*X)([q0mhW@b'EjQnE,<o-f`,C#;;k-8Y8$'m_VOg4&=<Ip.cFNqXU?Om'dqkjA3@Z%gj$8Sm>(SLPQ#smfb`>;YV+DRr`n9mpXu94]?W(=^]#g7dN9O-Ip>)7E]7o7=I3)Zf,lT?p$LSlNUIWVqWiRm\)428J'uBHY+L1M%`gnG.mEF#T]Dm8&iM>(4r:]5YrhNn,]/CY;%c63@[q6s=m>U&FhZ%J!O2!`1C%)$]CR$5as-]JND=Zf4Ujp+=cA"/)Gl-<8V^T6(%E9lq"gr)c=;OZ(bVgCLd]8rQ!V#MCY;VM'-gsM=Gn)'T(WB8DgY?>SP=6$pMAWrF'cp7Nm1n-_;E8&II.GVIW,Me>c^ne*SX=='n%n'96Al$`='4#<(,J,7u"2@lW)s8GgkqbuJ'\:;c(O,n9YB9(DQri^f6Dg_4(9`!SQ=nW>\c!01+&'j=3MecYin0IH`?hKI%hH>*r%ei-qHH:tC^HndIDJ,[%.r2OgBXrbm-!rN#pp8)#B2X=A5r?kBJB347BH,&tJn`&DdY4^X&\Z.isjB^:UEun-6ris!-iNje4EqQeB%>C?,.PJQ:<@rp7Wj4g.b[0JAIc/VUIT5sVV=Z(8l]r=f5X7I>.q=B6b(\dnhr,m5*eSe5&Guo]0^B?3./aiT&mI'#R=+At)c^.mb%o37Z'D!j?opM[cKHrW>Adp@FplcR=F9/u(b&u?B<ro"fGYk[MD5O[H5_Qg^[S.ApZm!\8Z>P17a^)kR+rVY&%Drp93XQ@(V3K:A(%@sn6&-3HUko0hrkUG(ir2s3-73X>QSW38okqajM3qYe&'-9(_nl_f`ODS<LQh9Vpg`b4O[LQ22?%\LabY'i$U:CdpX_n8ib4o_q?%amqA-ij0S9^)tUtch=qW+5MT=]\Wd<IfINSjVqP#DL?kO7rsVE*K/Ke54`\h*_XKf1S#>M_;0GPpMW=^q0[d3"NB]fX1V$?T&4['%i\<TuN\Vd,=YORb)<Nr_(/4Saf=X[J4&"u5f"%DC.o2%jcGE.-cZpb!53U[`IWb$)9krZBFniMli.JhO-LH3N`Fml"'`FLmrM`A@%;iL^&1Qu:6U`'*QVKI45l`G>AiM71d0:3IE6&>Micf23D>1JP_9.#)VH+8)sN;dH:V(>2r'#kXQ7?]o<4DF`2pWjUNM@mglKn3r&%a6U4ZV`QqEqXWsc6LF]^PLg:YR;2!aroMsNJIs?`b,bbIDNn-9RSqo[3d]*Y1Z'GgT%CXppRR)\(nZ)CFo:BFo="<m^[l$m,jSj%%r6Kj\fTT!uJ>iS5bH9K+oE/S(T,LfjB[Y*\V?s."klC_\!p^D]04b3F]_)CC2@!TZ99[9n9i^0!loEr,4$2-M2s7fDV`J:aEAGLe%`dm:Qro>C]JS,Osm@C,6*INM;`Gk!5gDgU;5f(Wug]%,j[t]GlkJ-hi\YJ&"58l(@$0s:(<,8iTWR'AS5In8nmA4*0R4\^WbO=mX%^RnrFk*XD8H>>``A9i;=IK&F(^>E9d+26^n:uuHN$Jr:aXl.(h6iHr9c=uG*UKZQk=b.;=Y^T@D8,=c45"dtqR'gb7dG(;F&pC];%H/_#,S$,9l5")\EY3o:^4!07L'\k8#HYI+UcC`T:0A!ZAk[/@h:\31V^77)EburM*Q0VM?Sub81r-iX435n.8o!IXQ%k:q*:c?Y3%-K`_eB<[fTb1Dgr@+udZ2S@dM^q8KmhQ'68qg>``5V'Ah2_ShtmTfd2ddH#knWEMu93D/ibqDVC(*IYpgh>>LW^um!s$Eo<Njq#t%D;=qpJnUGdkI.0*24Us+?f9\&L!/PI\CY(=A4pX7-tAQgl.W9UR]dh#$/o.;ad;(0YP(W[h0TViX**gq%rRN\8Ym4e[m!4KCi#-E%aimAGQs\EbYP[#/g[qAF+Dk$;Ldh4;lg(U<PMVm)fD4U*UGZZfmD8ebUuS*@k3tG&D_CPVmH]hGK`\l13k4kUHka#"8N9I%L61H#%#HOT'_PX7&_#:S47r-*rdJceDR*f*p\++^R>FONFg#JQ/?U4V"a[_2Z*oJTuQ?o-*?eUNa0hU^'74<`K2u"(Q.PIS2PTE%D3]js&%-G#RJ_,VXaiUohps&*M6QSIgZS`R^b>&1@b>*>-[2-mW@KC-A8?o^S7+-U4&a5iW^0feBG#fj;Veq/'L>Q1V?p!'s@k=3)Z_9oMh%Heu$o#2?E%WC4HAN:1+(**t;HauA3QqtTp;b45GV=39*"U.kHh\_J(k/5NTE"h=0C>276[%FC9H?iO(Z=i_$\JX4n<oXIj'Q$$!;%>XV1GLrp(T/V;&;CcRK2M(Mg!A;-o+Aqo^=is2!)ZD,'OWH>gK:4=_VOHCMtg2.6a_-bd\8BH39H8Al?Jji+f59As`eg?-n1EVMh%jONJ?Kg%[:-#G7*OSVKP!$[,f6MZ'B"7U'<qo*mWraMc%pRaTs<8:pj9(W&De`_+/-I5<OJk5kaD<XW.q4U.:SD<o2q/XYTRSJ5G%jQ%H^j#,#;;sS(/8]WIUd?nJqpaTW2a/g-nGJ>)..SeXkT-rfcRCp\J0^I6]cG#cKnHBX?W?b#/Bj/m]cgU:N^,0OTRT+Z)nU#fo%8V*&kfltp8q^cHX=lL3YVKP2"]Kt)qZgVM^o(mJNOFtYs8nel:g<!R$I"IMGrIntXo"'l.A)G\rmK_<kJ1W-mGCNb!l^P#-9P*kF%gf[OYR5Y:/b>bTP3gecnhZGq>IQE^"0nD?+Q*U\hJ%G=+#P.<\qofN?]$025e.LR9nO<P9-l$`T5hb$)f9c*tVg[J1X0_kh*HrZ,%V4H_2DG^<ro6fj;PY!XOcA^5!%g-eFa(s/\c<h9HX^Xt+@(BoZ=XtP_k0A'"S'RWlYq0cmnL<ZLp2U7WID*fK*)5q)R>gStC>O)8%-FMY"Z+&c9eT-.pKAA,p5d%TYKcQIR`kfA1J"U(mIRoqBX)7Fu>!/tAg+L]RbF*@I'?U"$1;QhHr^kW6^>gd!WQ7OXmAq4=hXdl<%p[esaljhuXK2%]OELV/r-Jl\@_B3K'\^;g/6GoLe]V0H@\lR[AK71:@dq?K<hgusPcZ0e1V&b$I=u=W!F<:#h%:C9sU>`\BhL=rH%?@D64`K]3*Q)fKK4:\eaS"(1sBY"*G#<THhTbd$nbbBNAm_c%>ZtRX*+341rMhWU75<PecCd,kq.uc?%dAF?YI`utTnmVXsh?7/j%AOWo(Xi('ogUXF9^Yc\h<uZYglsjnJ5'V(=V9t3qnWf4S/n_=ubVQQ$SJ>`P#$\`G>1CWN9npL@2efX`\bYQp\S2TC]bXW2B6/is%MA_+N)12'#U&EIhp&PGZ@,GmmiX,:pl6qXujQP!kOF1dkMCq(rXW$GnpP!iQr?K;U@)qt)4QEJp+aLfWJM$SL;s.Q]@)^Gj/1iC3%:e.-Pf3mK+d/JN3?b0Q$Y-`NZlQ-Z]OH@SjAS/4j9P.u#0Eh_rk_93GE5(rB3S/^Zop0F9e$?Yf5Q,DAo#?i(WDolIeaT;)^)qf]%l*[&9Ua<(VJC@>UVXlA*H\tZbrT*jQ?4'Dsq\al%<YqjlSilp-goMI(?G<M2L%_Y4d*lt6Ur0-I]2!3FT#7\fs,me5[p,0:T#u(@%[bnenokQd899d+9?/=%tdsX3*TA?V2qq>mSYPD@GbZLJhhPFJCPe;LoCS,h,T$gZlC,0(]hG?#al!3fEg8).$KluWBQp1ML+&!c+%%6Bg=XDC%eVH`Gba?H22Y.jr+=-FN+Bm\)OQ+[?IgZm'6hH-8j1Y/Dip4bX"n)]J4OF6uVbFVsr(j.LM@O8LQS8[0M`*5V<ngA+;%oGrgnLX^^@^k:oD&RE,NZ7-nDk@q87iP`p9J%ttE^%#k3q3,UK^N]7<-gr\VQSEU<&Tkt3((ipc*C5IN.eC^-28-AUTI[*,F2lRL%8'mZ[e9PQfMY!Z!K!)JBbSNXu*C3ar$dKPUf,[0/&hQ(&L2O[\K!(%JS1fWB?.3O.S&qTbD[]oq"J$992cgDnK7GuL]WW:i6e<>E%a"i.B6ZRN!d,c@UQ!W&I^-**BDt@"f*mfC-]O.PlCAhk%_7,1)rbD+H.K'$g`X5Zs]j:4d_pWn,HJ4Ed\gOCfpaPm,Vsj%>hr&-j%s8/U)0\DTL@IrQ'Aa(j,C.>8ohcFgcF5pWO(\[a?2r.o:er[Hf+4#D.l.jm+8:<$j*V7c:A?OBWW@,O=Hul2C7)np?Se44FlOIa.%.nCi"mVOT&D)O;E[T>>720u7HppB"_+>lqc$?fW\5[^=mogW,2.G/LQ[7sl\le]XB%[k)hK`b%B29qq_,1>&q$nZ\/dbU>WJp"d[%7"!XXV3CZ7ah(8^mi\I9e<)u^%LOuY#Vl8pr2f6pQR<<mmIb"4gh#5P'&-?]bA\<KmIsu<8ZOg*nA\(Me][Y:^V3QQ73(29Z)`?o%?\=-=X7,eD".Ko&6A2sS%]T,ekL2$7f?lT*LP6LUV`T:abJic`)s(6W)gpRj#8^DmQp'')3KA#Y9[!KGi%,/Z\Na/.>p1umJa_LL%%'TM91Y*F"1N6S8<aRFp`]@$Abau(siV3)3T+tG*@-?X`).FgnY'LB+^T[S"]@ks*Q8@R_]"=UFAn2OJZguL:TDt=a]6@T\Cu=()%<uogqdG+Vb]k1..Fq]5$>-2F[0f([ZW?><kP7o`-4&g+[$=3JX)(4k;4O)W46JQ2?rPlsX7&BQWieGFnfm\A;!S8[/cj+]k4K0`1%(#-5K7lK.Grd/9Y<33-4[Sl[eJ``MPiGjhh6a"#S)A.,`oYT[o\%c!V"L[s5gk7e5B:sOJ4j7gB>gncc&#,ZeFQ7QUo1juB)D,$7%L0A-!K%\3hj62akl*<LK=dusBMKK>BQpmn&41uOJ2f,'jMbJ@Bqmp(Xh/RY)2d\e-9R,^:WCDr>6!e:rG=PhIl9=]`kF>h:77Mcq%Ir9-7U8,>K/Mb[(>/S^!pc?^/aP7LpfEHr%c*YPcHH#'lCQY$dd)<l?_fK!nV`?`79$.#ubqD3U?&_4bqJ<"aQ_qiK0O%Z1dbO)L%`*dSPHZL-Kbel[5<D5F_[dfqY*W9]QI6W]>\Le5lVpesrpmC/e0i)%[+'7CBm'sX;o7m4R7m?G&rUn<il"8L8FR;aH.*YLJEq_o/%XLRPt2Vb)lRHL5a14p;REJoj4X4mArqpZ(4LRXEUCdIT1[.ib>I'_klqKf*c(CsUDp"9psF+%'+rYlS(3&ht^m:Kn6nSj;4X%(#Z%3ZbG5K,lQ&FiVD1=TY\2CSC9;Y1:,KC,mmfY(#]k)D?8NhQ-hoHt;;o[Wo(V5*=0;pd@k,;qU@Kq5foYjNP=;r;5:.ou)O7H[8$(%m&)_C7K4<5oJ7bX8c*0.+b"ea(\Q69([5K(2Pf9BG(\H6E!!]Zh$i[Sp8W$uN=Fa!NRj\8&$L^o&Q(.>I$&E[s#,6ga>KAE@98E<%*8@]fD;Ks;8`OoID_u=K8h[NV!HUKC[p`!X76bj36ggdFQgUL3LAU3M*F9QKlPtX@CVP%`ksk)EV9a-Ri+`u,$M)>P,a[_;qfM/K%c\4c_qPW%q3X/*MqPSWCOnO](ohS"tX"J_,%i^.=L..oP=AVENMhOQp^0"3"lAGg7UqZ&b#'uS,CH>UtVh'"2(1qnE<OQ<^%CEc:%UX-L^Yb'UR,8?0OTnZ#%N!P-t)/Ghf"bsnaN.'rQdqZ$^\=Rle3CDb/ou_uC_R5s3M[bBHZY0#jd2ir.2sKXp40>:jmU-4kN:79(%noSZ]N:?7*>1%q3]kFOn3dh&M).nV)+@WJV-8HPb_b@PZRO@DO\\HZFRoYmA!lZ7)*-i;g9_o7!-Ufj6%`SQWmU)t4f1=2m#,iC<%H$T#VYPmRBkO3:@DdEt3/T9LjDD#].AkG;TTkLt8kM#M'_:IGab4<Q3a&DhiMJ?a9M?Q.I)7'2$`1<IsnlP1pH#A:5F=Oe^fcI.g%#hZ,_?,:D_Rl7r>03u=,I/^22V&Wp1S3Ho<a1'Z;_/?HfK&-FnMQm!T_%Z!t`si&2legM_BRB!AY#qcr-e:qK=KJ5<hj;6D.98gO%Y5CD'<.&C;fPRhbV0[G@G=C/0]:&Ddje^)`1QRTKGAY061Eu1778;Yh_/:4\T=;P!Wkj-uM^@0DN3M']caCLZjO^^gbH3F'^@laA%WO&IWRFq?2kAh`sVQW0(<M"#SmbOM1j-e4j($;.WDSCKXo?$ccd%)/I'Qj!0H:8B&<gqR6b&L&2ZMUQ58l?1d>??Dn\060HURG+m%C`Emu@(S"&-i;2`=4+3SFh1b2<;!f5;&+[QLPkKEb0iCR-+PAgdUWrTjEb"gDTqgJmQ"&ZcSm:Xm='I.MTE2.iQeptQ*ZCip&DbN%=aAqPJ)AIR"8rJTgU"7BUl&/\G5\rM6aCMoc'9Roh-G@se'5,h/h!0kLE0t-d<&*fFKQ/P,,4=j5&IU2k\.R(5]3[t]<<1e9fG-(%EUIUYcJ5_PBY('TTl4(M1u55A+cD2SlZ48r+&,fHWRRD!Xk'8Al'grin:P"W1gO$2?'B3QI*m%1JtWjIY`NP0VHCFL]F&^Kdl"D]%P/Ah#R]^?qI(h-gR]]"U>$s0mPAnZfR"\#Y26Gd&$<'<el'f1%I`"5tR]`WjNqgbZd<$rr[bti1L!A7D_6A:+((j9mFH+_1#Cas3%\u&T@L)R%47aj66dP^4SRO=QLh:ma^Rh9!f,+>[6K6I:UZ-d[=N9kIam)b0CVJ?fY>5/$[BKBc]jPmOB(7MKCkK:n[aDa+O1gRG3%#7W.(YmjtB0R3K\j-H_GhC02T@TSR!UcVoN6&(SkDYpInB5Vls\nJJ50Mc"g]t.?iR)RRUCPp)G\J<YI3]Hdq+X3,gMOo33"po\A%;=CpUTR*qrqN.`-ja(k.=[R3TJD")N3p*F9B(!sp8V>0\2hP81Wt/M8?*F5p5uk8hO8;u@lnWd[]qGXq\J%SQ'?T\QpIB&]0XD,B%c!BJWWa@b:OD^)Ki5TiJZd@O`Aa\j=E`RkPQnik#Mdgb$]@t13/T]N8ah?K%qNSN0RhtL!2)]nWSguC\c7h-L<N*g9cdHl_@RYVL%h=nK$JG[=VkYGEPa,5aYSpM]1%kE3QX[,C0?J2YMh)O;!qlHS1\ip_11ZJjY:5:W?Up^TV<4m-74Aif/PUlbHO$$L%-i1&3K,?'C%?+[l5P<o)K225jshGCei`Hag63Z<:t<?iSu3&^MhHsE]VpXZDQ4o76(BJdu]:EERu>/XKZo^_@;h+sZsAA(+;W3[?BGFb=@5?qR*%pM4R;POIV^"_IqfSLm7HPArV,XC%f\euARh2JB:XdoPqF1R+T)N0tm[/p(Ih<Aj;I+6r%HkDgrVQ'iLsh*5B?f@NLS0s6,eYHPY)%FNrJ8A`i#563j*I_Sf\:L7\&IAE^b0k'lI<'(D'd$M.?"k0^Q&f"+=-2B\68r$f9ZrHlHln$rYK$AuckG#)LQ$bTEuDN;Lbl^OA,%,'n1FSe^[>eZGFT_He&TfNdHS@,tgU9L$0fhO&P^VFl.*Do6=D]6Pmfori>dD&_Z`(/WtmXS:FRj)4;#g+rNhEKB`/1BY8#`10,=%8#`$6-o%VKmjN<:IphZ5T;@Ut>`k):4T]D3jgjB"k-elA07*<SkJ&jB:.M3Rms[=#2.d%I\Mb`dQT&Q)]6t8c@8XB<.rWi!6FNTe%Wn5#?q:LW[VV5!U=RG/4ATF]pNX2,pH*K8;Mb7ih].2A)0m636`f`dTQ$P$SpJFgmK:(:T`mk`LKe`6?;O&GBX29Z0f:A7TRh`cD%k*j\^[AdMllc3@\b<>PZOn[ujpLq`[qD5m0X%!!14]Zthg+8,p@U++`rpF3QmNod;c!BbBn:RQ6chV'UW?,@"O]RNgSfQjkLGYg^%,>V=7T2I,DPC%0GX5SINqGEX.o(dVKI1FZ"YeDL.)uH8!/t[W>4e\JhEGXNCAU3n(IdCpdr0kdUF8>]7H[*QAjMjrs[`?:b8)'Uu%TDL"6fL*'F_fk2>&,W;HlEIC>4S/>`>FE+KMKA5E?2I_M$u[M=f^dJOoU4b/idP)ChRgp'_39d<Cs-hq95iWIfdgB4%Dk4*1\pX>%/Muk^A>LOEn#pMM*C2V@D>iJ'B5KqZnX&k!?C_$m^/TT?o<%DbIsQ]2H`\soG2M.o$TFl[[$@iLcTekWrdF!Tkq2?jlUt$&ID1'>%Hn"?pfjT,D:++BA-?u<O9CJCQX=8#29n#7"d5Oc2k+>GO:YO,X4FPlF\Pj"l0=uE,Q7#K-m!i<GN_0*0Ra>b,Y&:kV=ueWHI;5n_%o^Hif7Ye,j"HUhL<GmF]gZeW9b^OZGGViMng>d[cordl91o)<OfV>c/^"iKR>;^+;j!qAt3]k6mZsq=WeSbiF3Ih!)*uD;P96]gR%_P5I>4gp,7V6(8sVm<@L9eP8T`e(q.nC$Ud4kT:Q><R^Oe_oj6<-nZ@?:0n1KPimA^j2r,BpCVX&"b^\R]*Hk]oD&%]:*SHmTD>W%DkfHL]!i.Bk/*jThVE!GIiC-_p/$;62GXeY[)Q=ARg[;*]=7=*ZtkZ0O&::.+2)qh?L+)=YUi]]TN2UbX"j=;R,7@B1US"`bR#a;%QK4sJ-l,[dPV(1G6[%XqG@3DSLJoj1PO].1Oa!:R_+iU5He`pG^g4Ru>g3gfE^@0:<H_T1iV,4_'t[A0EP:d*nEJNJX:)`&&c.fs%WkD0rcp4ng^RO9r]4O\8:r$55(C%f[%4WpW0r3].n$`(Pc^)T,+Z]J7)@/;?+AmU4cAW1nX@Z$1nAj@=GQt6Vm='Pfc=YQ`5&KC'%S))c!.QX\;<TB3[eP;C?5&tftc[a;Qgft>YZ!$aA#0ke/,F<'P(N,QLSJXUP?UdKcp5K)hc9p%.`TW2*L"&%2$F"FWi)k?sY_mad%Z=WJQ^qMOR1THheL]ZqT6B/7E]qYR3%Y@jm?tY_KbUC9[AD`R#Hr(Mbh\a/#3c`F2>B^LKN2H+1HX)]*MO@RC;80JrCl9mff@L?g%?W"PZ8fqbbhP,Bm7CN5t-su^CihD>$EK7Z^$@%IYb#e8Jphu&\2-%h'Hr7V4qNZ+9jf8fhP.APsShZfSTu!#*IO5,3+h=:MlhV'L%jB>At.(?56I(>rn\pj6qg\.i:f,8__Z^/l&\pe_`L?_djDe<mcL",e]Y3IsN<dL@KIbcW7Ku`#>FoAlTG/o5KNk0\Yq\lO3<GOaY%Xm=U+cc#?,$`NCC?.Ejg]4FjkYPYA4<<28ff<>((pallPldoFmYBPBUN4OJo*bX#j`-Du.[o`7/,)56[lXr_Pe>rG*N(U/$p$9%>%ZtH$M<nFNRNgfP(0;,ITpKbq'H@5>)]['g6cg%@ca;\3ADeNG$VO3K#Fo=@UUfH(#gp19m^[A+N*KcE]UW!-pS5J6i1*B2jX0,fR%<PPDR),o.jbMeni0\>>+`mjZsg@;$*ah1Jbr@Wi,qu+(jqK6.e=e'uE\piaW2p(MulLFP,Hg%\=NNDHtfZO?]=<0GFrOR@?MWQn"%eb'jspJCCg>sM[[B,fF%qM@>CTP`>I?$UBgg*lu[`e^<#FoC%7<Qh0sAfF?J^\O\q^30Bd7QiE#Y$ZBQ^Oc(Q7dAE^"C&(q2lm^#%[AunhSb_UJ<MONhWd]qiO!ErdNTXe=lM>X]3QQ)!IpKfu>`Db^L1P4:YNn+umWE>O^[A+No@2gdY?H/%j-r7M*``.cX`kAp@\103%qXr"%hP75\G?)C)$iHC'Ibe$&)GdUMFoAnPqT[*&eN`2qZ`9X_(N-CeIQd(aF4U#"?-.ETaUp7'VQSfC]E`*#p$3A%M2s6_Y$\YG%B\i4'<S+E4Ptk>og<I^[\piHo2O3L[d<5E!rIHKH[A3'a29]1V0k2HoqK8FmPP1*j.mrUuFUtI1igd3T?hJAW;\5G-]`%N6eZ=!)%)g><qdl">sf^SGh)g9s\L:SDoh6=lSMFhSugT]P<I&kbB-_[[3+U2GB8Q`;Gk">R8HT@]59pB,EDQD%DZ[Zl,fQja'YpVcY(otR=%aiWXPkK:-?H`P=?a(_o.mXhp[I/a#,^QsK[:[YDnr,uL]rQ=5cC[9=7I6$KHI./BQG-d[i]\U&8DgSrOr]KoFFQ^&u^OC=`h*:pT%bBn:">jOW,^IkfnZ[Y2gnt)I8ro-)erL_s<+*Z%U0<Tc:iOs[7oq(pOpXVuUs3Bc3p\t*N(%;*tGAAQR%lVb)r4;kc3Vi@Hm%'>)%(Oj-uFo'/(hcjNlr^^S_kO4J7,j1K^5MK<Id`KYsLNA63:-X7$oZET^PO7246+$[Mh"rH8e>]?i%lW%3mQN[Ujf_=4aa+O+Gjb:a%S"#m]IeI-^,jW&Vp9qMZo$?(XQ&#CpJ'?o$USZS&04"J<>IM3D/c*X>!D2r0UU@f.9:%Oi1enf^LAou7hY[2NIoX4)Z;UMLons';%DXC`CipApXZ0U4,rVb-c0D4<<8!4Y(Thj8nDf9YJb#=*f]Qs,+m?:mq^0`/PF=jgRG"F,g?+KmNP+<akLqP[lloQ(d:;gn[h>K^K%0jgZ&k/R?90:,a!5Fe1D:lt'MqWB%;eU4a:\UF/l:"pD_[eYYMBkB37P,k1.1irHhRc:`dIe5f'FoC0T([opnComQf?+k[LNn-FU%hX'[6]tUCgoNhqDjpZ5HX`2$>]a<fl9)RffrOORS350gDph?!CpjFAk&/Ea+I3)8#qRk[X?T7&tl.-XK\lItkna5`:S'PHuVX_;*%Y<Muk1]?LS[dS'?M,oOc^@a[lY$Nf3\8]1[K7ELKKhLP=f/Cc9ki480_LE[H]<]%[rTW^AGLoNXgaiD4^])f<2>Y`YqouUQXd=*A%^\QIKk%(=d'2-gnc*q[JCu9R&;)YrWn4\#t>Q=ONTYA`f^@F@L/fma=l&cGR:O9*l]sDEtaWH0gBe8.Nhk#(FbLgLdYt$q2fDg5m%?XKP^nESK_/Zdj`RB8>I$GGi?41paQ/Q;\D]QEW$(;D0N;5(RGphoKfl'Gp^b:l$8e7iKVA.aiYc<TbEU35a=+)a)\>NqBI"UB2I%bU^;"SmB&a^&IBb`V7h7l+J1jT3aa2_>>_7H%#Z4.!b4<jZeroCDZU('2<.9_h-7lgFN4W0?N@/hP=@G)LK+cPI3[W4_siW_l;gg%r0*`M-g1$KcE$FmD>HCI_7okhkt^m[F:UOj7^'++!#LAG!58-Y*kY\,48ta^!.QV?]`%6ZNO>f_)]1iJI]h&Wjh4Zk%K1"m=.*C=%(4PhlgqRZTpdqWEHWg`#'Wl]9^K5.$mf2.W);J<!mE):%nD?S?ppe"lQ2LO7:]=AoZhL"<:b/'fQJ_7Jd,*YfrKF.:,c-jB\"HY!%ZZ0EERAUi!DVf4cNp$XnE">oGr'PsYVVdR%]lk]-Z^:gfd$;f?eujD$=7D74m8p0tN2q9pSm=3Yi6JbIJ%S9!q`QO2UsEsThg`?=%WPT1%q!QVZV4(#@O'0-gCfRaas7p(l8oZ_HZaRfkjBT%=RCu(+e.Q+29Pj_ZOqJ-DhVkGY]0'76>DXEVpriQAEdU5=I^3i!@,/_t%X&#f,m_%6*E]a&:jk9Y/Rr!k*r0thf5BG6eTVV0n940aV._'8N<B)-T4hOp>n5m;U5Nk@I$88$bIJ.h5c-`%(g7DHNQN&!/PeKrB%il:A.qJ!"G[L5b^fZ',I7&21h&&/%e4E#B.PpK_+/\_))q3=Urn#aIE<5uMj&b/=(89@N)_;B9d="[NH*u(hSiW_!*T_.i8?Ve?%%h>QHWMQ(Ts7=oj""N*@p\nHZYe+S*/q-m8(Z:HQE,Vs]4eeC#2lgR3D:Vr1TK.crE\@Ic+_mh3CX#W(hM!!%\CRjpf8F2usl[-$)%8^TsM,eYek,:uqZ]^K]%4?QWEqRh9,WuUeC`>SEXY[!!leZ5n2[OfA)5MZ]E=U+gVeV0Zs-.BgP]8MS;O,GVsG,utWP0a5Zpp*`%%gI2o5+;`nM0i[c]cK$k/B<^3e2O4,Cg*X/_`Kun@csq$.s36VIF2a)<#k?;k$c,kj4=g]_2:U_JDti+b7uiUWjjEhaefK0djJ.o;%`N,$#=5CU*GMlSMY3`hN-u8:24X`CM8\gX5kLV*%cEE#<SR9,`]5Muegj/hFhKS/7O!i5V?_#C_IJm[U]!q-=bh;mge"s=_6`79(%0>F#a^H-f3*P6`l/3CWG3T[EeX4+!6^OQ1F%-?O.:Zp=_c9ORBFU%F,fGVcNT0/2W';L`g^:I&eFu#+6e>`k\2q4RdTiP0Lop8)r%6`m@"^L^9b:oc'&=emh&WX@-X(8_MJW^;o7"Y)mAWmG:=b##,g1g*tS11[@NFKXA!30s%V31msgcA@nnl@8G31mF>6f?KV.VjI,C%WNGQ;:-CWGHI9Uc08Oo.nJ60?Yru7i)Qe#%Fc&k<F,b\Xlb:r`Y$fEf4%m&.mU>"8"d>J'\(H2H^\)L1't.PWqrM[U/YZ:q^fg9,%H`J\hq&A2\HS`k>YjMCKl,q$JgCW_>:OE,uQGmu)5%!0\EVIn*O*;cu,g=<sq:7pBG((db2Qjt/c52?RIJTH!Q3QpYs';$@0?TS[%(^=2A&uh_pa+(fDSif.2kOUpY9,j(QPO7[[I/hmiVsh5FLPJY9s6oCqh[f]+*?P5e]!/PirQ4]W*>RHk4S\p?E,!4hCu18sbp(//%ajI.^S*tR9V_:C*PC75gHH;?^a1&cGs7bR!qtkkK^V4^S^V+mBJ$*[Zrq&]r+#g(+h`ua.\8:*:E`$c>h`Edrc>J'DIJWKq%laL]%p9%B&kArkZrZpn,2Q=SEPaq17nj]k\A9mkA0E!I*m,==dOj5h@P:kX-q7Vrm9`Nmm[<q\3a$"itlg`0Z_=Z3UCYQTWh7^8qldNhp%b&2D!l_Bq&Y(c<s^<2N0EW5mtS*RPIjc@!Fk<I.<_;7<RqU^spM=%u4ZuZ2VfS]RfIastJ)tp&sB+RM&pmP(0ALH^_@XdlL3GFh!%e2ZPaHVS\Bq!nWropqGQ27JUD>Gg*A2XC9#:Hb1Lc[FJ"LjI>F6h^CEnV;8a&,H&fnV9j9&+@q6rWB*Ig]#Z_l0"d8AK./[%^<0M%X2R8LY[RRjF7cI,_\TpS+3p<4>k>agDK"s+$M)!QhRn:01&^s8h=nt9lSPqtan@kWP?ng7]lF'6DBTKJ0DkC_2Y1t6Kat9B+W9;n%l1X&=BA>*#ZFb4INuuNa-C35jc%o%G:T]H[eui>k=A\qUSSq`)cX20Dn99?AhOWaUG+PEP+5>:V>*[1+SRCjYm\T=mS,02CBNmY!%Q!Z.fAc2GQRDW6I?`DB'TDU_@ccoO`*YGH$lBh-Y>@7-]KuTq\1t(8ZIeo&)BgF:'2L,@V)h1RRH[`5:,d8)rmuMCdB#tG<S0BW]%?KsWN']LLl.T?#]4mQq]@TO&lp(uRLr4[LK`QnFo4)<_K*bbh?gn(V6h"8%Hf!g(D=(L(3FVsC^R=-(#I2H#`(`SOR\IV'or>EZ7%fYar'(*jE6k@1Z9Q!!XaWU5KHeff+sk.A.FfYr"]fZQ0iHeEt]=0\)D0E5AW<HRc0AhT(fhqEs*?U$;X^$k,WM[3soA&I0crR.nd%XCcgQA(XFL0<a`4\RE'/3*W]tmVH)Jpq&1tq8G5W%f?0f'R4nAQ-Z8nJ$(oGaV7?ZgFGtH#(-?u@!a9Us#`Ep1B++CmofX#"0P#g%[f)rJMUH(P?lQ)M>$3a6[O]be,KrY7begOTc1Y[8Fe1L,Rrof('9eqMP<N<"d$VB9p3Y[PEc@W#2J_&KoqQN^'jDWTVRER1ok_%?%D/RX5gV!H2:>7,T,_n"**H:T8lPe.f]"$\%4,IN5QnGg*gUm7Xgs>RT`\:Q[ke]Ql52R20XDVt^HH*sJ1#:RM4-c8S)S:6;@CrcP%4%HKOI4_3Oc^7@[P]^WMZJMWPc6td/`iTD*YL9%jM_e-L']X,'\`:l6DVa.u?UaSYds=b2%VoZIs8&R'4#p"o-1BrU7LR5PcCTMu%h+i2V=sQ$Jm/O1YXu-T.&bdB)jQ4YNIjpQP\ieXAO%"*"C]9A`E]YAgIj^C\V=FRT,j0;q)Z=k(3LqgC@G+,)q!GD82/=,e58K];%G^(9&;HTEU?DpsbAZq+WmNB1=ioUL$2'7;"B@H.Gk[JYXYj&R&`,5f=2IEZZ7OrZ2-IWIn2Y'+[.:75`hO=3slcn$$5ni/G;"N["%$&(,(0Pn@to6dTJ[cK0E=DVt3II?[dT/A^tYE*%7^7@=A-(_2`W"Ft1qPC;/`.GP5FnrZ^pE-KC^edY?s6n+kiadaZ5PmC#5M:4P%ai]K1SfIb/o7J*?pNI*3s)X][ptruQM8+`D4T-B#Rq><BTU(0hf"].VjrYtOr9TT][Zhk0<qa#+TDZFncb]("^)qhaq;8"V"MMI?%5J(uHl,"()h:KtZ>[#[Qnb2Y)qG1m;CtdJcgn/gafCf/Mrm0X9s*+I'rpAZta0:ios4`FJV6:P.7\uaT?iA/RrPQAgqOaTtl2K,s%\),O\lK%KR&)s]NeF!/ngIafgp5#t-oF)Lj98*(s@R,3Y+@*6n-f10PHf<Cp;M4NQ9#IbR%15KX&uB<T<5)!M8X(ck"(FM[17coL%h,>/,`L]t-/.KIl`!FII5Jdg$cs;;/24`6igkLE_+:;&`<9>KcH%*b=V4R\deDF/<KYD"k)G-1Xgr3qBd]LU:Z=YXZ\$@tapl3"*%lW9e0+C;WI^T00kP,^2I,[qlkdtGb<JT;,j[c/P?$])De[_a:hgf6s"d=@k.!&,Ms_FXNH+Ql[l0T/%!1K5)$<M`nc*+_%eV-@8j%AgM^t-ZptY+QI)#n&bB<P@kQc(S<%rdd#Q7b89QXa:Is>-An,EgBo`"I(_VYCb#p-U,<^3St<j@gPV8&r^;6ko(Aq+Ik-C>rCEZk%Z9XV0*d%q@,E.5VcjsV;B0t[V&\Tc,?.(./O\!qn^b\g)EZ5CqoG7bf1A#8LM-e1Ip?ckaYKVUN*LC0`Qi<X/OHg,cM<L_0/7Bf#%_u]M[W)-NGOm/[%jamYYaS/skOa\/UM6^Vc..dTN_Tum,d?Xu7$rna<FqpddoJV`/!I]3o6L7Z?'Ln9"WQ[j('LnJ@)OB-F?B?S`%o?4gWab\Ko!;osMQ.UZsb/&,<ZID]B8o0/E3M[B?#cU:2dfpH/-bGgDDbOhr0TGob<N(7,_DI!n3tiD+`-*u3[ihWb$UT,3<rO`?%Y`PB34Rmjlj+YFh2,3:/8)r2@dJ&@]]tbr<$3XOqG+/7%bb1p'0]^nYOsIKMRh4Zdc?C3Yk:b,48D,RPOXOY#E>U&g@QoPkU0T<d%(!?d@r^4@n1:.Hf>%.A`Z*4'Obck_lfT2j^(SgZei$p[S3D6/)Bni%n=^q?)(T/$7`1"4`.^E/L*9[la`*k5T9RgBMWAI7(Mm[4d%D['dXQ4bWJY_M6tAloH8*bH1'iA!`W_cgdlp#XX7jBJ^>^=m011c6cP6AMnsYT0$+>B(FU:R0Ff/_1PK3m,YhR'gVG%sTamXJLYK%?]c*/@c(WHOe/'g9e=jn+sh$(@C_@8ej@'*5u]TU4TmEJmT)*0)O<1F`L4\LkaQkpQ\SP*i2-rO=R_V)d1aDF;or7BcQGb1hP-,@%LUuFre72*8=PTa-j\4rZ(8hptd=`)X9N$V[&>CBCjJu]3.;<KU%/4Xa#P3f39.^WP_fGbEbY&&MA[:DDE^k]!&/+dKK;h2J5_6m\%1_=%2)><&b1>#5/)ol8o/U9c1P%r^q,)GnHnMaSU/]\S#8"-Y<T*H6%,jCSM2<Rsj#6p&aRMpGjl[^GU'[oqc;'BKdA5QS@ds^I(%`d2$EJL1G`U+:XYRY*_&9]2B!R&k%)c<(j]J?`&W/@Om/ega<"/DsOV8.sl0:A)(PibM)HOG@#WEXU?bK&11T_>'s&l."&+^YU^P%,9cY<>&lfC(eIWiho2NIh/0r7DIJ[!@:Ij(E4Q7QOuI^b+b\4IDoOZ*e?RfG8.*\IP`4!K&Mk]``,A=*,<.1b0udd]iAD$bOXaeg%()@-p<+7sSVPOVU,r:jDnjpt6oAa<D.u464WugmL4o;41r23U#qucQ0RYLC00,G:*nJ-`-9U8`nT)!82KZZ9:UE`AdS5Q>S/OkDl%*K2n4,$!'uUrA5!g>^0*(RjpTV>;O02JcVr>*pUO+Rl^:=;+dlSS5+o&f/q<om<I\#GNS+iV+hU?(-6h8]9(TKlVp"PVLD`;jq/6%04^,s[:0,*lgUS>f._=.V$d)bl_ks;8qs;m3"TXg*uk:m:GM19@DWtJaJOpd]KhM.8>:&;LRpMm'%pMi9GT_scke>b;2+.8,/pd\%>O6XdbZm%+aQ<PMrh:qp\4i3a,&\o,\`X3"00^#6Y5*!h[?9;r&;I/SN$B_\($#nl1pcaH$UKr?#c>qenckOs`nJr%f&J('Wu_'s%e7(<RO`j)J8:X3c9L+cOO&IZg`Ng.&nk9m2M-+q+%!oN`.E"'Vp(=A+*j(r%in0#l5\7;s(^X-G$b.&HV=dlkM?-@`X[>fo+mBR1%7\;8!)Mpcd9j2mp7T@?I(K4aqQ;!KGP43/tp"M71C2"g]`*-$W0Ik%n5)CBgXfOu)Q8LOo`HAU6C9A7L43^%M"Eq"!7X^C"LDc)T%#8-`_l*4e2TgG1EPdbj1":$FrT=J,pfD@rR/";1Q=P&MB5p.^U,FU,.X91jn?k?4#Zqq>0+N>=c$cYL;XUfhDdg.O_k'@W]OgOc=%^o@;MA,C<iq;g$-94begQ9GTgYWnaU/=NSp6tq:poJmbS,%Hn'YnZmf0D3_>(A_K;iuP+]36@C>WAtf3"X4<ddJ,C$"sKT\WTH]7%/.l&dOlIR9SlEUJ)iGlf)iXKV`mP,^%"3`H$m[Q3lnf?\SVH9/XFF5DL8rTSMFjGfho#")!F?t)`?`A%,!G&,8)'CJ,QlM\Q_L<'%PlO@<_JH0me]0X4@lAEOm&r5U5RkFD?ruQU)(0!_dTN[a]n\@/+B-iFQkiWgJhULY9f.6ho&P'aRY:0JdPRD+G0PG80p%m3%#KEg%-9"/c9ra>C?`fHLXW2YZB[&:DIcOu5`eZ$-VSaqXAHFZZV3n&aYq%1Qf'.#mY^B&4A6*@fU3P!\NJlmVVRM@j,?$k>7Mm83[=2K(%6C67]<>ro`)D6c<`Z]2ING/tTi5lLp-Q6k<K/%!VXeJ,BZQ2`:OM?p_"?RW^XV#k60cILHP7C8)!gne%#nr/08i4Np"<e@u9T?t9%dk\cRcX-cg\;'*'`WR(s9G*=.FY/f>,lpc>8D\!MIFIIi8GZNM;;,PeenQ#-klA/R,@!>bJHU#UP6$hB853mr%)a3Bi^6``P30`*%l!V&]Odb3tI4r:ul/P&G0@[<Edmbbj'g_Pa:21?aRCEiDJ@$X?-<UAsUp3V7<aC#i#`]a4bet\cq@!E-Wf+]$Vc8tl=CPAO@=4I.%r>m<V7b/+VM0s)Ddn(S'D9VjPN7=XAVR77PcWI'TJ8`a_!D->;r,biWEZ;>cc,(SfnqBHn$V^c.`lkT>E2Jg[k'W?!['>F?.MWk\%p&s-4r"-=$KT@4@V<I$75%:8e2Q8Zh`)X]_gs<3U#ikH=-5)uT`2=\6&n`EIV2<iOX'!Z7$=h/*.YDONdNP3V[k,JiYjI-n:L_P.%VJ9*TQlR!\9F%gnQ/GCoe#@9J+i6i@OcQ]NB%k47eQBAWd>&J@i1$!i7/@U?BYn0NqJ/Qc7VP.9XCW!%!tQLT0_E0cI8Z0jCSD(?%Rjc\!MdcVW;?pUBE<b_j=A?W%_c.$E(0dtNZMi4mY][Z"d2s!T(o]^9Ye@@sM.Q%81i!q1"cV)EhkUWH0Fo<4(9\1"+[/OWjQWHE%fkea`#8KGW_P>k'!@+mH1DqO.2"cuU,Zol?2^C;Y!Q@O#L^;\O/RT3RqP'$jg;pd?F!/!qN9.:q)\!SEaAXd&_P@dkTu<,)8%5G$%W`Cia"t$@s=QY7VOIDpY6k2bcFH?[5;+P2)OdD0NQs;c[b;Chp0pR"+?pTVEeq+YO50rF)=lOuL<(srl&/C])],3*YatGH7(NcPU%!3J<c4K2et&^_N'l=)b`.?f3SauTnq4sW0iDtl5HY!,c+LTQp<ju1_Dck@1N+V32'qMRd>@\mEVqS5DS53Y&jb/M_oQU\alG'>&S%'^!]X.jHh=."_Y0KlRP.204K-KtHn!V^<H`R4hVF)Gq[?!&c\IAa*5$S\#`M'%'^c(DY%L#MU6?o'>o?E\-?J6@u/G13"uZ8._U$%k4>27Gu9EORB<;TLEL":*4psaFsk5I0mRj0^/sADJFuN%B'+c"TPco%-'iurb:SZ2Oq7R)_L`18:@f#og0&tRDTS4RV!BNq.JY@f%G;7l6q%-LG9^EUNpQE'OO\Lle.HW@48O[YdBJ'Hn%+CZLiKGrRRh6:48Bq@DnhS'E253bC<;LVioG.6EqMJD*Tj8[r\/YZ9G[DT+%.#]@f+rgk.88L5\1h<Rn+Z[+&2k!KOFpoiq*8:4N15Kn*.L*ah>&"Y.n)&p5V`7%TEi\PQg;(Q5ZRUrgm3cG&+_Bu<!<\t>fW`N<%*YoBE2oSJ(b5@9:V\_2tNMhMhTr19],U%b9g]^g4M?@"t0Qr,O)M[QK/J;8),`*AO-ZLPT;WN\E'#EV-L<2`Db4V'XjI#EjANk9p%@K/0@Oma>)#.'AIL_N>C4Ye2i9kbMhghX<)C(]M"+F/<r4su@-$bXD20h0en:U_1X)I`jmn?<5!:sP.X@X[HoJZ.t80L>Df,*=uZ%,@QM7(t:6EQm\:<M%r<_'`([31.M*`9B?Dr5&49G(BRni+.WTjF<*%(A6`pmNQI3Q6"`_5q8=b;98V#Vi=!F.0-LWQ)14sYJr&g@%,KYErWFNJm1&k4@_33;WT6)"QZ`ml1F;9><it0'.\p#lV[ao'=5$3ufb'l]%SpocL1m01W3E4e?\6*WW>'prkOs!:pJ[nN)m#`RL%a>!ld1.s3UP*L,D:keZu#f_XD.,p8RaBq9J4!i_=1L:bJ#%A%j'[%98nnHg.'GcEIXl-4<A2PsS8QRO1>F7Pc,Y+])4bWpif^)bl%-`Lb]`A1I:\`RO&Fg3&dp5qsfDAi`QlU^Tk6?gDK=DhQ5;I/o!FWAg`hT-U^$7%N6a;?pP=:T6aY@?Y@=H[:9@RBfF1n/pq8r1<9%[/:V/4(9\,*='G<H_H5Bo5-,l"`C25E$Z0)E]5PDNT:OrEM.bJ2ed^LjZ#dd^<fIDJJfafHg*cS8f,KS\e7TQ92cD(bp^*ef!&C5%Ob?le_EGU!*CuB9J&nY!`=?Z#h-S'0iFFKiA"Gm;AbHd^U;B8J/iDT+7U6TJoj]-d&6(ujBe2'.iJQ.*bsDQf4<nJ:]a1uD_f?\p%0]`[sCCqk=Z:86T-JfVs_c@DUd>%(2""!oX)"j`tfq1\cQGMP65QlbF0`!3i!Z0g(9db'7[kMU0&I+)N<HEC]k`$6YS%0B%,p1_m%9SHSC*@uq/-1$5]-PMp!B8)0RA^6hH;H=5o?T<%NquL!DpOm?QUr>lhO^F$<>V'OAag,$M.#D4'd^=[8LjUSC#ugI&@iQleNBL@?%X^O4O;J>S\>q2s)Hnd58pb2um--"W4dtV^D\dHC8SnCfe,Ii#0WPR4a,,D86+LjS_n'.R0[tL0$mSq)Cfe)h_%MQhk,P#eq`Ygj7%"gW.#e:DCi)CCg8Ym?HXnANUCR99FI.)OcVF3,&MCD`F+P'DO(%dS6=CF"SXUU5%j,j$A)7pQiBhS>);Xc0o2LbcV.jPr5*(]gU8%ElD.u*(Jl(gJBRpB.U0:XlsYR7.=VWjHc1a8'B;7O#\%j0k+R_7+d1+>kF[P0.PQq'Tjh77]BgA"6D@LSUU2_dQ;_uWBc^ufTBRS%EK(i1,:ZH]-bt\,lLPefD.,o76@+`mSi&1:\H=W+7=<$gWO/CrqKrP^SGpNc<l:l:6ki59MO'DhS:]a/73_r@]!7tAU,)'L@n!G,%\Vh=U)YYS%-Wnc0'ZO)T?DtnJ8r7"GX'sLZ=<=rUU?TcKUjSQW;S$raH-r#,C08cKn-g/]B]]tj#MFj/JJa/U@7.(^kU,jeZ'_d*%/bP+<^TjIE@]WhSL/u4=QQH@G?piD!\.KPsRZ/./=q/YlX>H\,k/#+Ah4<C>,qqb:GjP;sjs]V12%3IK"c6(d,B:_5-b_q<8`SeW%bm6L5#QtcNEd\'@>"WTW!!8Em,N=JZRaGjeoqc2f$8YkcN)PKdUG3C3]T!f2L?01_RF)9j9N*JhBLHqt,:7(,Se79U:r@;p^Kq_k%MKuJ18rR@0o.i$TYo,,NI^GCYXbL7jdm3OjR*egCq@_lpAi)sY#U.3H<l<9#]EJ[!)K0aE3X_G)MKQ;mBJh>R&h'nRN$0c!YD^o9%UCm5mP/sr(&U?ZK.V4VY"sUNmCJ(+8Q!CeKrRDbY["4&M1.N6S`/%tpX'sWnEiF!DB[!#6<>s9kLuhs[(t*.9\cQ(d/8=rZrBr7?%@7_]AfgIG7NTa3VE\LB,Esg;<jW=QIP"'6(N8(Y6eM(FoJ[h)P.?/jGU]Qq3MDN%'V:@9sXKYB44KFU4eP9%Hf6OG[E_NmB/k:kW%887ds,)=jq[\b_k]@N2bQ<T`QRhrcCDB>H0]Wnt@0?.Sfju&+odUu0!Q9Pb@lN"a,8WuPas,\Kljhm#4d`ng(H@eAGCe4hq>^us)%*GHa?OcGGA.(:A5%93gqcFd9IAMR/81uc[bK8XA2,.9HTGoiJ<C)D(.)F9NG%.S@tUjb%"F:KhmK0>u0/8#CM*/.rkd6T#rGT>.\%dRY4s$u9u&j/QQK@hO12Q8%rrGTKmPTD7V#c6NrmiK13/\IFZJ!`!E=WQ4U!(XI,#W:g$e`Z>KfVHno&'.\hHL$6TN`,Z[!UB+)I%ntkYORH\cI9HW8H=hmQ@_$X<nAo"a\Ks4*u:BAD<hCugJTSA#2_GoTfKT3H/1pATrn4W\5#YQV6k;9YI68^B]>F<*2/PQ3(K>;nV%BEt2T@D\kkYD2-JXJHdR)NCdSld%sr1Nk6:Qd'M\fr9cc,25dk!2Ys\$409m$<%EZPtJLu#b"4^b<3*!'g`a9C^njAA\L.Q(IkE`%%""s^<^$VqEjL^(2(WAKmMa;<i<,u4`Qmk)Q&6+ip5P>pO>ns#p3[=mD6,Sm&-d<V7#oAU/TIUr=Q6O/9N[KiV5dtRQi:=0OuSg1%^G'9"/1074GpBBEK]"Vt1fMr/gqkU7k2%*L28(^mCt!L/(#uU\cPi,@2oVK$TIhlLDdfN;q;J9l_G!Bh+Ua0qWeOrbZckAjG@Egj%"<"#u0_7R\.[#,n,;[n)oHf)gBrE5mMgW]CQ2/EEhUnf`JpHo=RB_Lo%a"@M#,W]=J>jNkKq56P7AgUL[ZD@_MWGDOf@['%B(!Hn%SP!I6]3a-h']%5*%l%[r.[2_7k&k11;CTKS8h1W"]Q#JQ<=R-&Kn3g2d[am8Koq6V-4YDnd]?kb%U'"Z/4hWB([<Q[N)[0!Z!?H1%.od#lmU/_=0N/Qhi&]Y\WJV^6RAjqg_[/pk'iUO;eAFsKDhL5abZ#KH8>]sqWaY+l33?Scdbc(O^gEJ.QlqQf6t?cJ//Kj0W\"=2%PkH$:CIFskVF8TSh[g.kd3P0C\N,B^dpkBe,E7q?4>X:B&]`BV4ET88,-ruh<@hcVP8K6QLb?d^F"P3LAUtt5DUjo".Xej05-\;V%K7m`8Zc#CnTt$t3M7I^Qd5+Il0,Mh-)e3rI(59[m11_^^F+p/r>0_+>(KDlU"J1qK<?N%f]"fX\$b:9p;C$SHq;Tq!-XY*GDB5Ld%Lmo,S[.+b06/a-Na+D)MJBTsRT%(%#`lR-Tq?:INX[r0G(FjDSn9F:6Q5^1HhcteSN8<,bMKTW=&g/*`O@U-;KTg]k_X&##/oONP%I"]lY<AR:o,aj[((p%.+dkZO>fVD'D;FWV6QiaiK+_&c,Z1ZR[0qHh!>VN]%8:6S!1BmXn+h5[jQ[ojl?Df"3bJhh0lMG%-A][9(%nIUR`>PVLuM`nSbRd[R;TsQKSHfkZ&X9:ks1@k4%Bhq+LW_/>CO>N06!t!#>ef`=oT;IFt$HZk;&1p:9dUX\>+VZ]Km&Q0.2F`N/%Qon'(13q5XM%]Bp=e6=LAg@*/</J@$<2toJ6mUnIM:k+)7.@;L*p_`nf^Mpt#.I8P:lo5n3d3HV@/>h>?!;k'IYe;S,\i0*;SGGQ%fH:<J&&&Sna^WmeC05@`P]e:.$;AZ&S<\n\8;pFfD_`5_-U)O!,-7c$a\YomkmnC;I+uh2'-9\KT/a2"AqIshI'nl`q\CerYT)$G%E,ZQbc2h-P,!e1F#*kUj>RZN6nMi7K61QKL),;V;-r'nV$QC^]o-T#;J;"[P1@kbQ&R2Qj$\5Gp$<`o^047DQ@^<NeUi:(*OD.E?%H2=U=,WX5KoYa1KY9d_S3`n$,Vf9`kKMfQaS:c!X'13USq0YUPBI6)Nl%m6GE$n9gi6!uMVnCNt\JS!Aj,18cR$ZbPXLhF)1:I!o%!%A:(TTpfY7Zb9YL?0C3j98EA@W[?M6&?2*NCl`2.iFFkL\;Dk+b<rs_pDHt+<R0*2>E4U?)YjJ+_WHlZR$`r:'*AT=C/gG'(8:f%1>#\)@]\!Z.[Ngc<\h]O(1T98`qKfSZl)4I/gJOfX;-dF'@#k'?3M1OLdh0=<V1ZHcCH@;0rp^%3H?,G`3!%4*5S<LoDB4/8Y!p#%''#?C--<bC^2h_Z\G9&5"3HO&`UYJo),)UQJZ+a*-R#M^NU//^+fYh>o8D8Z)O=0\d7D?6j^hgj?`#R>6#\*.9hVhnHlGBX42')E%ZVF'tladk:e1g-F4X4XgfePpii(,LF7D>i3l&\R.$qGrD0,Hu_?C$-J6?`7&aH8$\[n%>ZKq?!:C08dZ!TrAk(-&u>@W0(G4N04'%[j?'7fIbd@KWjHQ?<*"BD;\<G/kdG4Ct0%V"B3qhr.5(R7>;,@pla5VYIA>$`n]4%FpKAhD&a]+09IC#PW=mri-%lCgn$gQbY$YF%apb++:i8R@Q3LIm+Yjk=6i(Aa_+k(]4[VS'D@(qh-Zpu\d$`JtjIm`%?T""Nmr(a[97UWENso=)(qP<o.uc%O9TU30_a,JJOWj+B%(giXW0g`o7;)-K]9d_eH8&ho$KiU9ma'`+O&=]0sUgRTor!h+H%EdA+*7s.+G!n'HD48"@C)kG"nSfegl+u.P_f?Q'<DB\GPL+X%%n2k"0L;L'ck$q6qm]PQjo^?6L%mT3'GM4SZOh<9PHR&ud-V64tI9ja2Nb;!Ef)]BO?S7V59R7koJ;"]p5dH=)5+2rWZICKRoZ+[:%`0a][&'Y7`"j@We."RHgqLN'\%[PjO/Cl?:>U;-DcqGWB,%6A6?s##cC5Z6ie)(N#'H."DJfit/j9a?R"OlIATJmi;AP6Ci]K*9\%[?A=AA;)-UXJ1W(,&m>*)R)h+CX!&AMWSFu9-^r8V6PfTTa2IX,q+@YM5!G$qi$b;SiC;OKEC\V-)BbIJas/DP-g+'?'FX?1#A8T%/g,\i(J7jbo^5!.8[7G9/V3G!oXm^+UO-_/Z]OFINo^qa*2I!Xj2+brDisNj)JLDCS-_8_dej9JM%4O1gqm`?GSR._4Go):)U#77%*i_a50moNGHl'\"`9c7l7)g[k2c=B9pA?V.N4]>q(N_Cu@S$l(ZqS`S,-d6[Nh^=+&QQjD";73(+5r&=!nYB!8WDK)08^`(%JK]G%L<N\.7O5dRMV05OJ`7eGl/iR*Ms%"j_h]A_N1h).'sir7b)-3+8X\u(RJRH>m!Z(]XB3BV=qQg)0FiI5R<de?9QPhOCs'8RR%<;I%_X]\iLiPec:D=2M!K^dFi2@b!1l='O826K[UsP9m_iK*G+%-N-!1,hf5^"ee`(6;I3nVLVS>g&reGMNX8%TuK/jXUN,\]'6a[#oh%>IJm0KK*88P<,#a(nCdQX8jF@jm`Aef-\KXS2e/lKW8H@A";h9B[1*,9dY^(R#;2'K5iT6`Vuo7NZ\IJ6n,W17fmsmE9tC8.7Bil%+u$!RjW*7]\VSf;_'o.QfjTo$3qsX0#\CGtSlN[K)[gZT<\T@kN[4QRWU@dF!LM+:R83$Lc2jAQ13>8.Q\7T_ZYM<X"@^*-7Jcj'%&f#%+bf.OTYAgaU9VTm5O^/:p"JK)Te(,+lZl55TgFB,jAKeuNfj(5t:lZNU"D&A\fn_(4_jW]=N.cc+Ko9Bqi-Jle2T%<q-aJe-%$4MQ?*c;s4=DhQSM*-UNloa99(4Bd,*2fYVU-YCuCH];ZPJW`U`3Tr,Y=<h*2RiI;[)ipmp5kc/XN#hD4r==Z],7Yn-72g6R$B,B%ZtGWT3_PhuY_h@iiOCFN?P-pI3N>?eKRX#BIt9Iq3iQUL0V0Uh>*uC#j$Z9?&DKCjllF3I'?Xcc+FLT#_F3*,q<Eo->f2O,iE;K8%QqhBm?N8_KB^kC-"XJDV&`<4Q*AN:9J08+j_ngpN6OA!'>*)QS%+@cgb;ntriU;/_'%pjU@*/O$qk7SADa>S=n!P/l/r$M?0Zud<%#OZirHcc(R,hmPTUiD5b-Zpt1oE<3]'MOl<*]S@*-g0F[_BCZp'B7DTVNX',F&WCBmq35aBdS\\\O2e[3(7U^Sj]7lU,=L20\V(T%&/^@3_FRPI,fM?Qs&e0A['7&;Yr&j,QLjm"A('\]9Vch,L-W$ingK)T&@$'A=Jq?DQ<P2qP%'WT1$+lh&i3ulGY5Gmcl?K5ji%[=%7gQ2)3Fd$V0>tmj'?uj>i`sb`mD0'TckEQ[_f>n+L8#GU,dJ&(1CZ1'i*7,(..^&o#iRjADF)iA0]iVk'N3F4?coTi)'1i[ULpW<%%EgaY2GG^!CQ6;\*F5`a-!gsgkCnc^/o/^H=DhQ5.T>t/4-qhrif1#f8M2BLb>Pre=O*&VC#Z$j/E?(QN61/@/r:,Z5"[G6BpU0`%^8i*J3oH/%XBPI_9JpodfGodZ2gc-A\QI_(+,=AC9-X_r0Jaq^/:!0Z7c7\1S\0efl6*X0VSG[FO]oYC$O\`bY7&?!$H\_X8lk#?%ob"XPK^`1.b9^>41#Z-+SA!L9/;apep(jD7+3r-O7sKP,P/>dTN3nK(*4M:B.H9\iPd0,na^FB=YinI;Hr<@T\ld7o<mZ37lCT5k%9^@!3)?O.;8qai:,87QJ@_%K;VJ$&8(!,@(+I.$Uru'AlKR)(OS0KRp<?-MD(F?MK/E78]mKD+GK?8/,S=SqTho9=UE:/J#bX[o:%!@n#U1mB;.0i17(b>(G"'[oR&^5t^[Ub'(4EMuU9gr56&TYqJR#VY2Jkk$\'-bCKMFK?C8^;QD(Lda4]37'][0[%P4*QYdR_K3AE%JTB`8)4K2dU0PFb1Ih\j8=<u)*&'5YP`#SSKp@3[2j(rua;dSRljfkWTn\+fUno_i6k`LUK@C\!EJ>SeIA[F'7S6++mm$'+("eD^%KnY["MtT^T'pI`e\HJi*Jn9[l^l9e-\iRJ\.M\gL5L`fi["7$B]KfNYfp9T$BDTh)<?UQHZ$5mt,(Fqt6'EG46A%adRF7Td<@DKM%n/r%c.Mf92'OsOXj=\_dVgR^DpUi3ZEG@'"T">iN9"F!lT0jKdrZO_7JQt8!,Z(1j($NekEW[2!RpJI<-g#(&[AUK&$&6QY:skPd%jTs6>,agCE>itAX%YJ&THX&qTlH/hGYOj(KRr7$WDC<]I&VQ=!P&a&C?H$s)jH(L5j<;q[ftll-SPKHLE0S!9VNVp_"(F?DdggRa%2T"u2Q*))XkD1u@Aof\3pb9_3/!UNSKWr=`VWNIc6pe'@UlM-%.!&o_j`>q`p(jBJi5<N'9QKD:QJ5N#@&aQg.jZ*fP!%Xs%/M#M%o>Y_]7K4teF2:%!2Pqa.FciSj(F4UK)-%)5L8#VG%ph4q#TY'(OtObA2GtihJE\Np<@)>A8oZTZN^Qr$##^'2_0<:Bcrf9f8-`'a%,>2HjCnIFXN<RLi;^"L07(-#5@4"+-e1p42F&HN]P/u0Bb'#-N6Rq(@8,],7(IMO9hl.3[!.i,Kfj$3N$=?FgpSssB@F7m[^r=sd%*j!^U!%RO\Q"*OnHM!%,.oqA>!0E$[oF]TF=4sj_o-X&q",m1(+u/mgU,8X2jY`*sQtkjO&L)O^(uhVMM'NN-AjHGaqC'pYA#p;8%V5-*pI5sAj18"kt0HjW\lO!`j9"`Xd\f]@aSf6Wj,-`7hC;aOgF>'^Pd=#L-p2pPYQY)CSRrYWoVG(td^++UsQmc=S0cAF&NY5]d%Juo]Ji^u7djC]_0RVt+$XonS`)kAcuaUXDPbVMO)KKp8`8.ImD8kP\Z6`qVY;X,L'jNjl#H3XY]TV]CGPbe&m1QhHmE)@qXUe#Y`%<s@PE.67Z9=Jl!95#ERKlp<&?2b"F:GA$Y<PtL$]]r%=]MaDPG^4q66old%V;"RHf./%/CQ5chd;$IacU8W<)SpU<L[1I:28NcP<%9fs[ZVeQu<LDdtX/+pj\M@t@O^X,AY!_M&=8C%U?)%`\Oc9k>s*1t6hGj24u2bN>*\CKcu7NouJiN@urHk]A8g2@".2$ZOu50'm^%7#`A)8[^qk3j%e/WSVQQj[rT5aTSD(,?\7)Ie*BsTB"6jX#iDp%hARY4oYHX"$LE7/Cds%cR2@i&T,Il4DB?:Ufu9ugQT+(#eiff%+d42-(AaJ"I07JY?P7'8'$EDK/WJjuJfR7l&Dl2-1ef"SG(HGq@Z3:9(Pi`(B`&C^oc*0h#+9&Fm;R2D]R^@S)mE:b0aQSkkmiMo%RJb,XQht5[n%XJ]q+>ZQQ$Fe$`*gOZ<A_nJ!6=GFDBt:PQORXY$haB;Lr;@V9W^[*kH^^N;q<K*6E9D]<O^=ND"L0E+u1G_B.02>%1JMHbUS5JJr=LC:!(32mZ_U:Y*)ZtlnotTiD_g)Houe"iTrn'r@X_*L.^]rSTl31a1LS8T//6jE&NDOAdanUFCigL(1B<#O%st/T%;\7+UU.<n$\Q^\HWJMef7-C8E?]XrM01"9r\Hq[fWI%5reR$BTPfaG/)G%)m(J1tTKoWJU*5sf)iD&'oUa^$pb-iK?-M9[2Lod7;%'0alO<0fCPLO]Kn$'`mbb7kPq]h;0lWO?`BXRRiNdoP`=46PqPIaa;\>2?N:NnCbhEnnAtbNd@fFN!$AfcRVK\QO(T<kuF2(sOOW%(uX=XXIG4&a1>E%-NeJbZ=$%D1PRc35O2l$\"ed$`pIJT3GqpAc5Emj=8!^eA7,4,X4NEI+6s4>GqV*Z6>@^ldA/*IeHMuZhOH-C%Z-r\G@kfO1MX<kj+g)PhbFjtR=cDCa!N'q$P:5Gk9TghWnl-fI@[NrYU(!<C.VU%(&P*!q((0X3;,jD_/FHb#oRK+^7cJnH36FKq%!%hG9!(C(c;'anX7=5/7W=6Vjkl_hpT8]ga;]rGe.,(2.*sAD'7!s58MBVT=#Yt=$ANU`qG.;LBhN7s1ST^AdV*peDDBR2N&odp4%D*n:C@RUZmU.kX])+C'f^Z^Dt=\-2r+=1%:.%ZX_D5H;>O%r8@"A1L@AgTYX-&tq5O_,erMh&b;d>0%F(e>lcP__)f7uTpMf,.'R%c-27dTSQlk`84k>Yph7)`Tr7@=K8r)'V($W#6P9.D[$DN5ab2>7VW4J%<A[;W0P71[<U_g0+XD#KP]aAW#mI7<!J5P8MQbceao5t%]48!Pa_igN3IjZfOH;4#E^.dKTID6]*4_Vo(>Cb#6CHS`//&1bBs0Jr!iradSJ@B"J:mg1$9*Xe5[8dIPY$13kBF1)o5VWaAA"/I%;,;IL10kPYKg5rpa!3#a*c7.cGe_];UhbK3PR9O[RE4Mo!jqb`JqtQ\a'joW>_5pPactu268C$.5QK\cEn*DP.Wp(oQ),<k,df#5%2!%5H=[=Q0=T\rf1]k&<P^&PL#lOtSg_e*`r^B)*$YoCK7@Q\UKdb<s8cYeI5Y@Ir1m_$i+^]u09_Od"+VLhR\k##[,DeQmTgWhI%bZ*,#+QNj,6=I/un;Qlc8]6[t"@Q.>`*OMaJ]R!h!PoBl>1J=q0N&QcW^;]Go5JD+d8em'UdB`T">.))(<F!-95$u.R4HiG8UjGi%@U5"qb+$a!?-*f7@pOO8AR)E5JZT=(KrA8_eQ(RT>#hXkd@hMTNMrci*hb+1PN'=Cr.H4I9Ao/]d8EC7,._TPPd47t6rH%3.)Q8`%9VR6==19Ml/C<Z)$;AFm:_Q!Q-@/Y$(?TR"i^/K@P>H"/Z:(1u+c9F!kd=$YiJ\G>&B#1OTt"C96@<c@ZpN7Qp"'jI'LeUb]Pkb"%M!HA9hWB8(?r;XOIprmAJqudi35*0_A`a?Y2j(`q't-I")?[j7P$#2:!%MUk#)6mH!Ra:H^_*WcdE#509[D5Y-*\>I$A^HL\=?HC%$)JFJ`'u!/*2XU`Gfc/+mP<'j$`<;=^<OYD4Io9".'a?;:ic'qHtRJqJ.*Y5GGof7%@oS&Y2MoC`">_#(*a<gP(&-\352enCMJ`H%`N]]B/Oa4T4r.WgDTUs7B5&^efX+n(r!K&q37]6;==7hAC<gElDSo6'bRmaFh\5d=LG#Q.P^654"uutaJ->brn7[PI_D%=>'[Oog%Lkq*XbdEm1<8k`Pj:WAia>Y=!En)Xg-HSlBOo\p7&[I>#jFkM7CNf+M=n9X!Y(o@WR:76[,&!eZN^P_dD%)'u`&d\/0r,=`QLi<q%TdpA6"auL],9q<-@YlIcjiJooIcoc4r&]g6/;6]ScpO^><T4.XP*h]2#pQ`Zq@+Q[j06p$S+XC3.QA&md)lc^m3#sf13"ieIrccR%6=G.FoR^20$OQdQi:l=?r>\YlBF5H"c.YUD7HC6NB]R@JdMt=e$1TVP`1ri<gH^`q`lD?S,7oW%'d>Fn!J,7+U4<p)Z!u+RL`Z@:%"*5p0l0OXSk`B;:ot.<4"R07VVTb+D-R&iok!1JHc]"2&l^EPQ`DA(C<V99ok"l]1'\#PhX[3,c]Zrfg21]CfZ,[fg6CCXNQ;6*`%WONZL,pH\K8eQ4@UZG_W):lMA^uJf`)e)5QrJ3kXr0;2QZCmF(ke`.hTm<Ag&($l16l>D,I-Hl_\Vjqt@:i:Vhd0l7H^4*"`A_&9%gi-*t%_`$<NV'#r-n^@9ken8LU,34q[r%6ROd:M.ei)V/3@H9fHjdYk:l*dO!.6YW]LGsDnA6<?J%Q\O34YL)ED'2$.eR%LdqZC0%;1[e3jY.sS6]"#;&_0ts-TZ+K`6a.\;[]hG2TRTk*$`R]A^?WQ!*2LS%^7/)#WPe\i@c$!e`^%Dj;Mno>d?Z%_6ON=%@(h@eR81W%n#Ao<AQP^e")P3+URR7)F1Bb.8V^LZQZ[DV&^h/-X/`f7E3R95B!0@qfPmg&AUfZo_l\Yc5%lcLp>JICV'"Nj0)kpQ83dooY7-(r%K;B\I)_))4X20r1>#f)V#)>f<]$Xo28@PQj6jsNkM0-'Y;NYitQ\ttd.N,dFM/3<6TQIQH5=RibXm-N3K>V7Gh/&%7`6G<&Oq%,N%Pdo+[=c(7.W3k&oZSb9W.W;a>E=9qs#I4,$n.@b>lm>3Y2qY`+=anI5`C@dEO`H]5c'9AA[TRW2UkLY@!G?jj=5j;)OU[0`b\A!4%q6]M#"B[3)!EI&S#E^uc]9pWi%L.QH-kVV\&i/)F>M'H5(7#]3eSP_$b%:%0\9+!G&B#Wi5^<Y>?4kgf5]hDkifd5X9HtuJ>>[Qc%,V"u:,6tji8G<r8Yopt'"$?aDKKM6I0i``+,`^khV<(':P-kIE>\`"!DZU=:+j/juL-TtjG_-HmO*F)#1/W'"*=<Z4fjNAeSru#$%j\dEG(m=f*d,O6M(Fd@<o5SG@@#WOp"GY]7^591i1^(HtJmdGCSM-Tj"ALBX0W>bB#MBp\+@+S[Bnkn^pqW%LPZ7T5ai?`8a=o?#%W@`)n[NW`=JN/lu<*]nuO99ib>5Q.la57H$WcpV(F(,'F#K(9.O#Unhim%seHpik(oM#rL!--s7<'[-K5=>*28VZnp1UHKa8BcTM%%OMH9-V>q]U,Y1,UaUO=OVhN#QncEjauOJtK+EGllKYi!R#kkdW8J%N5=GFu&b:o-`#(>N,p"K?"c%L%J[j<1L[9\4O98(FjZF66%-/T6lRpdJkC_`>Is-F`tg-9BJJfGn1)Ja91;h57rV2dN]^I2Q+%:GJ*U[&;d_'ijTPKPDU][]#&.&b)E4<gAmp9c<&dbJf4nm]n>%:d1d"PnGO\^;S5.F5j[E-5OmH`9UP=$`ce39e<"!U9_kC5Y>K70gdLcjKU<B?N%O"=D7_'JP.Od@b_<"aUm]7O9,$pkDVh[P`^tZ%?d#?<"'.=bP__2&"_NRem)dU?3IZli'FHCX,aH69[Nq.O.>an>%'_5&NDU<]F\XF)6A]>X&bUc#Sit67&'/.3BJfj\#O.YO9`4"/%;$h0"jA(rE:l8(^&qNBT".KcEo<#`[,>kJ!=P+-/#H5ei;/52kFJC7#.mdh!!jNN6^m)qe'8rc38O+Ut[Nm!FDPKp&5#i$H*"\?r%JYNW1&lOlOHnp'THuXGJ-f[hMcQlj"+ftMQJja7>iF29cqEen4KB3k<B7,lm0TIsI"j9:ji/i.TbmcTg5n5m7LWB'd%#-;U8<mGg%1f_hYc>A5iJA-QmR*&\;+sHW]Ce:oPJL,54V-B5r/:!FKc`2!<dR.%VX*4s1Uo<LX^l!Bt.XcdsdOf%iUuNtqU7hE,OWt_M/4msK%bo1X<4\DTqJLC^_i052=0uZMW!%7GVP1ubEO.X9>l[Y2n+NKD[&>mH=nTiCm`;c-Rp_.+T#\GtT=."lLnIW)sUSN:m"TfT<3(2#?%$5o'g?'G9]^^#MS#_.r3m.*u)?V;TngCVos/VJ2l32A,!Mf1560s)#h\YD-9WbYMo<[JlO5+Nl1N[/sER$JR4L`Z+SaeDW4AD+q>%Z`ubfR(stNYT1f$_kHi@@uB@b.3AmBcBA#1,g1IaY\n_?YqRu0:hi1\UTT&Mq<\ljOdK(*Q%.:F7eI_S'.ER@M*\9!2jmY:ZZdB8%Th88\WE>,D5,m.=hRc#u<pj@)@EN,"+t=,iZ^J*eE&a-%>2r:C@#LprjQp/AX;0;LEa)1*FUL1+Ku6eddEAcS'&tlc(bd,3($HGT%LP3ddAlAYn&;RM'Ot"ca%/WaIo2hHIm;a!N,QkN88O[/smP'NnJs*'O.%$iC-C0a/Zk0[HVkMqpA,n6h&0!>OD2J)XZ-"ZB,7u]K%jT\3>.H),KjK'bk"&:,X[S6"d7/UN,bZ+Ph=tGAr&]34+5n@c[+9uPV(cKD*YG_M;+^u0=1#G>BcJ6CS,#-B%5iI_k_UAYg&L1#7%oaIjX&V04JM5:.u"Fcbl_3XJ0r1;usJ=thIOq*g6CToic':C<q^L3bP!2/V=CQF\jA\sG+,@'#KP(M&I"EgA4Uj&M0+dG\dSU.j+%.!:Xd^?-1H^]jKPqTA^KZF3+CC%c;#UC`aU0*-;NLO_u#F\]JHW3&L*o\sDVn&B+-a'WZ*c]h4&0Gs,'WM,%JOUSd&%Da5Kn>RdY%@Q.p2^Q4<Q=Jo&e8a(Eh<8u$iU_-04i(4ggTB_5?ok=n=R.j;jj`4CU/_^8PANEaCWT:eHR#s02iB#Y6Qnar-c>_krj'qG5`@I!/%H%JRSL0(7Dg_1H9A;QO[Di#@nML&a`nNm8OpSG;jG(AT/=RkCM;"@qW4V^MeVNmNGdjW<NfCLQ(I.d@HXCC(lkN_[G0``@5T<D5Q%RPT.%)Ar,`Q+nD3HAK@;l+*6F"qN#^!6Vi%+JYZrh&,O[*."TYd@`K:Z@"-bXMT[O<[+B#<aqeu-*a8X/B#$_HrLB*MfXbn_A@Si%^fZ8b@j4C0"(*\r#72:/q'sKIJiNb_[gjn+7)uHi1c:n(oPFV;J3@RUn;'ffnq@A3,fH42SB^k[6a^>[o`J/s7G,)>At4lFj</@d%3Am6N$4N[I.feeU9>p86eMfGlL2M_RiJ\/*o#I".>Y8R]'2+!G:(Q;!7Ea$hKeKi".&fl_m$;d%oS(6^`.C^&]gno6<;G'rZ%K?#%dU3^)U$+=;;F\;!N-8oF=:)at;mKN>jNt?%=X70tPlnonMhZfDS1aXJ[Z!M:WU,-KPTX;(R"8d5X\kj)UJ+BuKI*4fR:I]r"Po<d%"BeVXh%D-TEuX/#TmjL,5e09T;P)U#RoVq#VKlkB7R"9n,G1<i),i#I($2[#+(r^Y.Maccg5pPe:-oR!a[V+9\;>#_^8Y@4Q^+)\%TboK><cX.coiY6-eg=nL5EPGiX6psd]0n%agdACL.rS!q$j*<s,dfs))u=\J&8`#Eii!!LVNg/7/";Ys\X6'dCC;l&CPbJK!hp;8%75.fQi+81,ANppf5+^&@6p;39S<\dJ^hITd9C4#nRJSP1#cgK//XK7%P0SX(8'WJ,k%0febct$CN?6<o@M<2(,kBT<3M9!gRXY^/%8W$.E8LBV-/pdgFE)"3dW`6&b;AdiY@3WWnG&AJB$5Al4hUi,#.n/&Z8M&b+Wfeitnh6=!L;qM/DqQn36j(q!q_$Ml+R5e_0k:'7%\ak\FLRAnQ%#>&nQH@k+ZZ]nLFsR&:\Q(Wk`i1<o7YpR'6ir#iL^M.B3^Y("B;%^1(q,be`d,U<qH<eE+HGhfQj\jBmRiYcRo6C5%85<]3-Rr=id"G%Ldmghg,PilD5";Iq-0uN'Y=8T"iE<oTi/3OcPO4^5/D-"X@51o1!#Dgi75<[>%j=u;9O:g$,%4UcD]nJfGAa!d%:t;W0N;Y[jLRP0K.-E02>6^DhJoCLa^gh26"ed8H6BPCq;jb`a;FW4*kK9'Njffon@,]WYk_euP(KbQbAd?upFq>ggrQWLGBXW+]%@:-BbOHS8QZDEcm/U(h6#V-V)1)!k'%(SgAKsA+3]4E<A7VS9Ic)26bMm"]n[h3*r0'<ASC#6'?^R5eK=^,p:Q2NrDJ*6&<Edc=7%<h(6[TXsFf:r2ui5Z#A0$O"hM:(V)=EJ#C<mK`i8N%5%=X?/dKciNPGp7MfmA:^RMKFJE3MSS51E/UBD@iQ_l?/7B4K(aAJ5eFl#%&K#oG5m$6e(CA=F(afXC*#1C=Hrecp_Z&1rXqGDNEL*PR"5G2m*UW3_Wlr?'rnkXJSf+]Yj>oTj)!;3?2p-Q##!1%\!`M"oK`^j2%()Im3h2qd&#Zh@J36IWjZTc6s!^e!g:k<m6iDNOL+qO:ti*8S33;3bp3R5Hm-=iX)"go?3ADr\Mh:2SjE+]QIKQ6DqR.rBG(DuHD%QOD%7#cERrEb]R.TW]9sJ:X"d(CZr]S1po#3&_7\3R/4h>)m[C^h6]=0n>:(a$@hJ6\^SdZ??E=n!$*P:j:(_3lWlV/R?te$9#[[%"8#`=cN$#G5sskLihFi-$bj1,VSQ77kQkf1C,j@AK,TbjfYBZhj0F6l0[ON$8:H6HL-tNcj$j1mi4@=UoBK'jKT:*55f41o*#Q^%%<t8t)b*f"OQ8U^F!$1+N6,OW(fKh+0\TUfmER#U"c8"`-BK=)KK3Hi34=[9hGuW,kDB@<5mcX[nN2m1e<h2BiFI9ZFXk>[h&(&Ep%QOgI'3djuS^2>#8ne$m(BNT9Q^f683rW(c8EW6%3Nc>%2]!&Vo8:SOJ5b-lBmKs#7N&-::f*HR3XO.l?&?NnhQOoS8iD(QAEYNC7%%Q_N_UueCgE"O78S<JbH3RUWThDrkYKNaCW'laPejtHjUYfd;0)ric,=WcT\,(gur3.a^DmQ/c_8e"N@JdurKTltQK&tgIS8^MF8%1C:Ij]9<48iD>,\,@!j>@GRmckSUcA[&c<S@/j859*?:'>TsW4]9c@3RY(p^i@ZJ,Y3oiK7'@&Ch$/':6:X&+T]$0C'9MZ"V\@`R%_qe(&'@G`e6>50U"m?d>'P]YN$&';Kh,#Tb!(R_3`-"KlCm6^_)HPZk*-?]u$JLJZ8\qtHF%X9[O)R`X_l@3="WcNi67qNK.6pD5%VkBaLTMiW&];XYgW_P$/a1/+AA^sXHk&.]08o5q7\?#rs_J+^-f%jAWNc86sL3;)_TOXKncuOg:$8nnHYfK'Z/hHRV_+lOp2o:PC%VRPR+6KgC1(+asSR0DLcG8@Qe3j^k[\`^sm[Erfi]<qVZlI^\h("X3;*8oU=%I<F6ntErA>auZe/hTkffTBI2RD^2$]8Mk0mB6HI%?Oct[;RCOql1J8!l'"SD5->]a1*/7Ic=H&5STt1snYc<&ruRbJDGF55*e!g2q"3Xb5MlrH-D,d9pcjO,+-)C2#Kbp8rKjA,-\oHc%Im5quqXrtIrt(ooR)`9/DEcjHr-ngbXss~>%AI9_PrivateDataEnd